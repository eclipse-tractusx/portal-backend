/********************************************************************************
 * Copyright (c) 2024 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/

// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities;

#nullable disable

namespace Org.Eclipse.TractusX.Portal.Backend.PortalBackend.Migrations.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20240716084452_813-AddSdCreationProcess")]
    partial class _813AddSdCreationProcess
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("portal")
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditAppSubscriptionDetail20221118", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<Guid?>("AppInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_instance_id");

                    b.Property<string>("AppSubscriptionUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("app_subscription_url");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_subscription_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_app_subscription_detail20221118");

                    b.ToTable("audit_app_subscription_detail20221118", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditAppSubscriptionDetail20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<Guid?>("AppInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_instance_id");

                    b.Property<string>("AppSubscriptionUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("app_subscription_url");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("OfferSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_subscription_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_app_subscription_detail20231115");

                    b.ToTable("audit_app_subscription_detail20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCertificateManagement20240416", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<int?>("CompanyCertificateStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_certificate_status_id");

                    b.Property<int?>("CompanyCertificateTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_certificate_type_id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTimeOffset?>("ValidTill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_till");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_certificate_management20240416");

                    b.ToTable("audit_certificate_management20240416", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyApplication20221005", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_status_id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_application20221005");

                    b.ToTable("audit_company_application20221005", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyApplication20230214", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_status_id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("ChecklistProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("checklist_process_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_application20230214");

                    b.ToTable("audit_company_application20230214", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyApplication20230824", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_status_id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("ChecklistProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("checklist_process_id");

                    b.Property<int>("CompanyApplicationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_application_type_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("OnboardingServiceProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("onboarding_service_provider_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_application20230824");

                    b.ToTable("audit_company_application20230824", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyApplication20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<int?>("ApplicationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_status_id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("ChecklistProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("checklist_process_id");

                    b.Property<int?>("CompanyApplicationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_application_type_id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("OnboardingServiceProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("onboarding_service_provider_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_application20231115");

                    b.ToTable("audit_company_application20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyAssignedRole2023316", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_assigned_role2023316");

                    b.ToTable("audit_company_assigned_role2023316", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyUser20221005", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("CompanyUserStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_user_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<byte[]>("Lastlogin")
                        .HasColumnType("bytea")
                        .HasColumnName("lastlogin");

                    b.Property<string>("Lastname")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_user20221005");

                    b.ToTable("audit_company_user20221005", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyUser20230522", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<byte[]>("Lastlogin")
                        .HasColumnType("bytea")
                        .HasColumnName("lastlogin");

                    b.Property<string>("Lastname")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_user20230523");

                    b.ToTable("audit_company_user20230523", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditCompanyUserAssignedRole20221018", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_user_assigned_role20221018");

                    b.ToTable("audit_company_user_assigned_role20221018", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditConnector20230405", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("ConnectorUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("connector_url");

                    b.Property<bool?>("DapsRegistrationSuccessful")
                        .HasColumnType("boolean")
                        .HasColumnName("daps_registration_successful");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<Guid?>("SelfDescriptionDocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("self_description_document_id");

                    b.Property<string>("SelfDescriptionMessage")
                        .HasColumnType("text")
                        .HasColumnName("self_description_message");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_connector20230405");

                    b.ToTable("audit_connector20230405", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditConnector20230503", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyServiceAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_service_account_id");

                    b.Property<string>("ConnectorUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("connector_url");

                    b.Property<bool?>("DapsRegistrationSuccessful")
                        .HasColumnType("boolean")
                        .HasColumnName("daps_registration_successful");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<Guid?>("SelfDescriptionDocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("self_description_document_id");

                    b.Property<string>("SelfDescriptionMessage")
                        .HasColumnType("text")
                        .HasColumnName("self_description_message");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_connector20230503");

                    b.ToTable("audit_connector20230503", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditConnector20230803", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyServiceAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_service_account_id");

                    b.Property<string>("ConnectorUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("connector_url");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<Guid?>("SelfDescriptionDocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("self_description_document_id");

                    b.Property<string>("SelfDescriptionMessage")
                        .HasColumnType("text")
                        .HasColumnName("self_description_message");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_connector20230803");

                    b.ToTable("audit_connector20230803", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditConnector20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyServiceAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_service_account_id");

                    b.Property<string>("ConnectorUrl")
                        .HasColumnType("text")
                        .HasColumnName("connector_url");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("LocationId")
                        .HasColumnType("text")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<Guid?>("SelfDescriptionDocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("self_description_document_id");

                    b.Property<string>("SelfDescriptionMessage")
                        .HasColumnType("text")
                        .HasColumnName("self_description_message");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_connector20231115");

                    b.ToTable("audit_connector20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditConsent20230412", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<int>("ConsentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("consent_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("Target")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("target");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_consent20230412");

                    b.ToTable("audit_consent20230412", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditConsent20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<Guid?>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<int?>("ConsentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("consent_status_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_consent20231115");

                    b.ToTable("audit_consent20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditDocument20231108", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<byte[]>("DocumentContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("document_content");

                    b.Property<byte[]>("DocumentHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("document_hash");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_name");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_document20231108");

                    b.ToTable("audit_document20231108", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditDocument20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<byte[]>("DocumentContent")
                        .HasColumnType("bytea")
                        .HasColumnName("document_content");

                    b.Property<byte[]>("DocumentHash")
                        .HasColumnType("bytea")
                        .HasColumnName("document_hash");

                    b.Property<string>("DocumentName")
                        .HasColumnType("text")
                        .HasColumnName("document_name");

                    b.Property<int?>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_document20231115");

                    b.ToTable("audit_document20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditIdentity20230526", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("IdentityTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_type_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("UserEntityId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_entity_id");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("user_status_id")
                        .HasAnnotation("Relational:JsonPropertyName", "user_status_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_identity20230526");

                    b.ToTable("audit_identity20230526", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditIdentity20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("IdentityTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_type_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("text")
                        .HasColumnName("user_entity_id");

                    b.Property<int?>("UserStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("user_status_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_identity20231115");

                    b.ToTable("audit_identity20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditIdentityAssignedRole20230522", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_identity_assigned_role20230522");

                    b.ToTable("audit_identity_assigned_role20230522", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditOffer20230119", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text")
                        .HasColumnName("contact_number");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<DateTimeOffset?>("DateReleased")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_released");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("MarketingUrl")
                        .HasColumnType("text")
                        .HasColumnName("marketing_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OfferStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_status_id");

                    b.Property<int>("OfferTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_type_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<Guid?>("ProviderCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_company_id");

                    b.Property<Guid?>("SalesManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("sales_manager_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_offer20230119");

                    b.ToTable("audit_offer20230119", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditOffer20230406", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text")
                        .HasColumnName("contact_number");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<DateTimeOffset?>("DateReleased")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_released");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<int>("LicenseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("license_type_id");

                    b.Property<string>("MarketingUrl")
                        .HasColumnType("text")
                        .HasColumnName("marketing_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OfferStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_status_id");

                    b.Property<int>("OfferTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_type_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<Guid?>("ProviderCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_company_id");

                    b.Property<Guid?>("SalesManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("sales_manager_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_offer20230406");

                    b.ToTable("audit_offer20230406", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditOffer20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text")
                        .HasColumnName("contact_number");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<DateTimeOffset?>("DateReleased")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_released");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<int?>("LicenseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("license_type_id");

                    b.Property<string>("MarketingUrl")
                        .HasColumnType("text")
                        .HasColumnName("marketing_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OfferStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_status_id");

                    b.Property<int?>("OfferTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_type_id");

                    b.Property<string>("Provider")
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<Guid?>("ProviderCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_company_id");

                    b.Property<Guid?>("SalesManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("sales_manager_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_offer20231115");

                    b.ToTable("audit_offer20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditOfferSubscription20221005", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<int>("OfferSubscriptionStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_subscription_status_id");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid")
                        .HasColumnName("requester_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_offer_subscription20221005");

                    b.ToTable("audit_offer_subscription20221005", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditOfferSubscription20230317", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<int>("OfferSubscriptionStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_subscription_status_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid")
                        .HasColumnName("requester_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_offer_subscription20230317");

                    b.ToTable("audit_offer_subscription20230317", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditOfferSubscription20231013", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<int>("OfferSubscriptionStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_subscription_status_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid")
                        .HasColumnName("requester_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_offer_subscription20231013");

                    b.ToTable("audit_offer_subscription20231013", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditOfferSubscription20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<int?>("OfferSubscriptionStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_subscription_status_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid?>("RequesterId")
                        .HasColumnType("uuid")
                        .HasColumnName("requester_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_offer_subscription20231115");

                    b.ToTable("audit_offer_subscription20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditProviderCompanyDetail20230614", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("AutoSetupCallbackUrl")
                        .HasColumnType("text")
                        .HasColumnName("auto_setup_callback_url");

                    b.Property<string>("AutoSetupUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auto_setup_url");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_provider_company_detail20230614");

                    b.ToTable("audit_provider_company_detail20230614", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditProviderCompanyDetail20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("AutoSetupCallbackUrl")
                        .HasColumnType("text")
                        .HasColumnName("auto_setup_callback_url");

                    b.Property<string>("AutoSetupUrl")
                        .HasColumnType("text")
                        .HasColumnName("auto_setup_url");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_provider_company_detail20231115");

                    b.ToTable("audit_provider_company_detail20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditUserRole20221017", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<string>("UserRoleText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_role");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_user_role20221017");

                    b.ToTable("audit_user_role20221017", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.AuditEntities.AuditUserRole20231115", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<string>("UserRoleText")
                        .HasColumnType("text")
                        .HasColumnName("user_role");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_user_role20231115");

                    b.ToTable("audit_user_role20231115", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CompanyCertificateStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_certificate_status_id");

                    b.Property<int>("CompanyCertificateTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_certificate_type_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTimeOffset?>("ValidTill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_till");

                    b.HasKey("Id")
                        .HasName("pk_company_certificates");

                    b.HasIndex("CompanyCertificateStatusId")
                        .HasDatabaseName("ix_company_certificates_company_certificate_status_id");

                    b.HasIndex("CompanyCertificateTypeId")
                        .HasDatabaseName("ix_company_certificates_company_certificate_type_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_certificates_company_id");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_company_certificates_document_id");

                    b.ToTable("company_certificates", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_COMPANYCERTIFICATE");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_COMPANYCERTIFICATE");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_COMPANYCERTIFICATE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYCERTIFICATE\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_COMPANYCERTIFICATE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_certificate_management20240416\" (\"id\", \"valid_from\", \"valid_till\", \"company_certificate_type_id\", \"company_certificate_status_id\", \"company_id\", \"document_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"valid_from\", \r\n  NEW.\"valid_till\", \r\n  NEW.\"company_certificate_type_id\", \r\n  NEW.\"company_certificate_status_id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"document_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_COMPANYCERTIFICATE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_COMPANYCERTIFICATE AFTER INSERT\r\nON \"portal\".\"company_certificates\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYCERTIFICATE\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_COMPANYCERTIFICATE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYCERTIFICATE\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_COMPANYCERTIFICATE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_certificate_management20240416\" (\"id\", \"valid_from\", \"valid_till\", \"company_certificate_type_id\", \"company_certificate_status_id\", \"company_id\", \"document_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"valid_from\", \r\n  NEW.\"valid_till\", \r\n  NEW.\"company_certificate_type_id\", \r\n  NEW.\"company_certificate_status_id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"document_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_COMPANYCERTIFICATE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_COMPANYCERTIFICATE AFTER UPDATE\r\nON \"portal\".\"company_certificates\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYCERTIFICATE\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_certificate_statuses");

                    b.ToTable("company_certificate_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 2,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_certificate_types");

                    b.ToTable("company_certificate_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "AEO_CTPAT_Security_Declaration"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ISO_9001"
                        },
                        new
                        {
                            Id = 3,
                            Label = "IATF_16949"
                        },
                        new
                        {
                            Id = 4,
                            Label = "ISO_14001_EMAS_or_national_certification"
                        },
                        new
                        {
                            Id = 5,
                            Label = "ISO_45001_OHSAS_18001_or_national_certification"
                        },
                        new
                        {
                            Id = 6,
                            Label = "ISO_IEC_27001"
                        },
                        new
                        {
                            Id = 7,
                            Label = "ISO_50001_or_national_certification"
                        },
                        new
                        {
                            Id = 8,
                            Label = "ISO_IEC_17025"
                        },
                        new
                        {
                            Id = 9,
                            Label = "ISO_15504_SPICE"
                        },
                        new
                        {
                            Id = 10,
                            Label = "B_BBEE_Certificate_of_South_Africa"
                        },
                        new
                        {
                            Id = 11,
                            Label = "IATF"
                        },
                        new
                        {
                            Id = 12,
                            Label = "TISAX"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeAssignedStatus", b =>
                {
                    b.Property<int>("CompanyCertificateTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_certificate_type_id");

                    b.Property<int>("CompanyCertificateTypeStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_certificate_type_status_id");

                    b.HasKey("CompanyCertificateTypeId")
                        .HasName("pk_company_certificate_type_assigned_statuses");

                    b.HasIndex("CompanyCertificateTypeStatusId")
                        .HasDatabaseName("ix_company_certificate_type_assigned_statuses_company_certific");

                    b.ToTable("company_certificate_type_assigned_statuses", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeDescription", b =>
                {
                    b.Property<int>("CompanyCertificateTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_certificate_type_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CompanyCertificateTypeId", "LanguageShortName")
                        .HasName("pk_company_certificate_type_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_company_certificate_type_descriptions_language_short_name");

                    b.ToTable("company_certificate_type_descriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_certificate_type_statuses");

                    b.ToTable("company_certificate_type_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 2,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("CountryAlpha2Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("country_alpha2code")
                        .HasAnnotation("Relational:JsonPropertyName", "country_alpha2code");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Region")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("region");

                    b.Property<string>("Streetadditional")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("streetadditional");

                    b.Property<string>("Streetname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("streetname");

                    b.Property<string>("Streetnumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("streetnumber");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("CountryAlpha2Code")
                        .HasDatabaseName("ix_addresses_country_alpha2code");

                    b.ToTable("addresses", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AgreementCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("agreement_category_id");

                    b.Property<string>("AgreementLink")
                        .HasColumnType("text")
                        .HasColumnName("agreement_link");

                    b.Property<int>("AgreementStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("agreement_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("IssuerCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("issuer_company_id");

                    b.Property<bool>("Mandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("mandatory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.HasKey("Id")
                        .HasName("pk_agreements");

                    b.HasIndex("AgreementCategoryId")
                        .HasDatabaseName("ix_agreements_agreement_category_id");

                    b.HasIndex("AgreementStatusId")
                        .HasDatabaseName("ix_agreements_agreement_status_id");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_agreements_document_id");

                    b.HasIndex("IssuerCompanyId")
                        .HasDatabaseName("ix_agreements_issuer_company_id");

                    b.HasIndex("UseCaseId")
                        .HasDatabaseName("ix_agreements_use_case_id");

                    b.ToTable("agreements", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementAssignedCompanyRole", b =>
                {
                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.HasKey("AgreementId", "CompanyRoleId")
                        .HasName("pk_agreement_assigned_company_roles");

                    b.HasIndex("CompanyRoleId")
                        .HasDatabaseName("ix_agreement_assigned_company_roles_company_role_id");

                    b.ToTable("agreement_assigned_company_roles", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementAssignedOffer", b =>
                {
                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.HasKey("AgreementId", "OfferId")
                        .HasName("pk_agreement_assigned_offers");

                    b.HasIndex("OfferId")
                        .HasDatabaseName("ix_agreement_assigned_offers_offer_id");

                    b.ToTable("agreement_assigned_offers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementAssignedOfferType", b =>
                {
                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<int>("OfferTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_type_id");

                    b.HasKey("AgreementId", "OfferTypeId")
                        .HasName("pk_agreement_assigned_offer_types");

                    b.HasIndex("OfferTypeId")
                        .HasDatabaseName("ix_agreement_assigned_offer_types_offer_type_id");

                    b.ToTable("agreement_assigned_offer_types", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_agreement_categories");

                    b.ToTable("agreement_categories", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "CX_FRAME_CONTRACT"
                        },
                        new
                        {
                            Id = 2,
                            Label = "APP_CONTRACT"
                        },
                        new
                        {
                            Id = 3,
                            Label = "DATA_CONTRACT"
                        },
                        new
                        {
                            Id = 4,
                            Label = "SERVICE_CONTRACT"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_agreement_statuses");

                    b.ToTable("agreement_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 2,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppAssignedUseCase", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<Guid>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.HasKey("AppId", "UseCaseId")
                        .HasName("pk_app_assigned_use_cases");

                    b.HasIndex("UseCaseId")
                        .HasDatabaseName("ix_app_assigned_use_cases_use_case_id");

                    b.ToTable("app_assigned_use_cases", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<Guid>("IamClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("iam_client_id");

                    b.HasKey("Id")
                        .HasName("pk_app_instances");

                    b.HasIndex("AppId")
                        .HasDatabaseName("ix_app_instances_app_id");

                    b.HasIndex("IamClientId")
                        .HasDatabaseName("ix_app_instances_iam_client_id");

                    b.ToTable("app_instances", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstanceAssignedCompanyServiceAccount", b =>
                {
                    b.Property<Guid>("AppInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_instance_id");

                    b.Property<Guid>("CompanyServiceAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_service_account_id");

                    b.HasKey("AppInstanceId", "CompanyServiceAccountId")
                        .HasName("pk_app_instance_assigned_service_accounts");

                    b.HasIndex("CompanyServiceAccountId")
                        .HasDatabaseName("ix_app_instance_assigned_service_accounts_company_service_acco");

                    b.ToTable("app_instance_assigned_service_accounts", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstanceSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<string>("InstanceUrl")
                        .HasColumnType("text")
                        .HasColumnName("instance_url");

                    b.Property<bool>("IsSingleInstance")
                        .HasColumnType("boolean")
                        .HasColumnName("is_single_instance");

                    b.HasKey("Id")
                        .HasName("pk_app_instance_setups");

                    b.HasIndex("AppId")
                        .IsUnique()
                        .HasDatabaseName("ix_app_instance_setups_app_id");

                    b.ToTable("app_instance_setups", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppLanguage", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.HasKey("AppId", "LanguageShortName")
                        .HasName("pk_app_languages");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_app_languages_language_short_name");

                    b.ToTable("app_languages", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppSubscriptionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AppInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_instance_id");

                    b.Property<string>("AppSubscriptionUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("app_subscription_url");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_app_subscription_details");

                    b.HasIndex("AppInstanceId")
                        .HasDatabaseName("ix_app_subscription_details_app_instance_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_app_subscription_details_last_editor_id");

                    b.HasIndex("OfferSubscriptionId")
                        .IsUnique()
                        .HasDatabaseName("ix_app_subscription_details_offer_subscription_id");

                    b.ToTable("app_subscription_details", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_APPSUBSCRIPTIONDETAIL");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_APPSUBSCRIPTIONDETAIL");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_APPSUBSCRIPTIONDETAIL", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_APPSUBSCRIPTIONDETAIL\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_APPSUBSCRIPTIONDETAIL$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_app_subscription_detail20231115\" (\"id\", \"offer_subscription_id\", \"app_instance_id\", \"app_subscription_url\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"offer_subscription_id\", \r\n  NEW.\"app_instance_id\", \r\n  NEW.\"app_subscription_url\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_APPSUBSCRIPTIONDETAIL$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_APPSUBSCRIPTIONDETAIL AFTER INSERT\r\nON \"portal\".\"app_subscription_details\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_APPSUBSCRIPTIONDETAIL\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_APPSUBSCRIPTIONDETAIL", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_APPSUBSCRIPTIONDETAIL\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_APPSUBSCRIPTIONDETAIL$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_app_subscription_detail20231115\" (\"id\", \"offer_subscription_id\", \"app_instance_id\", \"app_subscription_url\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"offer_subscription_id\", \r\n  NEW.\"app_instance_id\", \r\n  NEW.\"app_subscription_url\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_APPSUBSCRIPTIONDETAIL$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_APPSUBSCRIPTIONDETAIL AFTER UPDATE\r\nON \"portal\".\"app_subscription_details\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_APPSUBSCRIPTIONDETAIL\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntry", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<int>("ApplicationChecklistEntryTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("application_checklist_entry_type_id");

                    b.Property<int>("ApplicationChecklistEntryStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_checklist_entry_status_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.HasKey("ApplicationId", "ApplicationChecklistEntryTypeId")
                        .HasName("pk_application_checklist");

                    b.HasIndex("ApplicationChecklistEntryStatusId")
                        .HasDatabaseName("ix_application_checklist_application_checklist_entry_status_id");

                    b.HasIndex("ApplicationChecklistEntryTypeId")
                        .HasDatabaseName("ix_application_checklist_application_checklist_entry_type_id");

                    b.ToTable("application_checklist", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntryStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_application_checklist_statuses");

                    b.ToTable("application_checklist_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "TO_DO"
                        },
                        new
                        {
                            Id = 2,
                            Label = "IN_PROGRESS"
                        },
                        new
                        {
                            Id = 3,
                            Label = "DONE"
                        },
                        new
                        {
                            Id = 4,
                            Label = "FAILED"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntryType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_application_checklist_types");

                    b.ToTable("application_checklist_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "REGISTRATION_VERIFICATION"
                        },
                        new
                        {
                            Id = 2,
                            Label = "BUSINESS_PARTNER_NUMBER"
                        },
                        new
                        {
                            Id = 3,
                            Label = "IDENTITY_WALLET"
                        },
                        new
                        {
                            Id = 4,
                            Label = "BPNL_CREDENTIAL"
                        },
                        new
                        {
                            Id = 5,
                            Label = "MEMBERSHIP_CREDENTIAL"
                        },
                        new
                        {
                            Id = 6,
                            Label = "CLEARING_HOUSE"
                        },
                        new
                        {
                            Id = 7,
                            Label = "SELF_DESCRIPTION_LP"
                        },
                        new
                        {
                            Id = 8,
                            Label = "APPLICATION_ACTIVATION"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AuditOperation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_audit_operation");

                    b.ToTable("audit_operation", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "INSERT"
                        },
                        new
                        {
                            Id = 2,
                            Label = "UPDATE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "DELETE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.BpdmIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_bpdm_identifiers");

                    b.ToTable("bpdm_identifiers", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "EU_VAT_ID_DE"
                        },
                        new
                        {
                            Id = 2,
                            Label = "CH_UID"
                        },
                        new
                        {
                            Id = 3,
                            Label = "EU_VAT_ID_FR"
                        },
                        new
                        {
                            Id = 4,
                            Label = "FR_SIREN"
                        },
                        new
                        {
                            Id = 5,
                            Label = "EU_VAT_ID_AT"
                        },
                        new
                        {
                            Id = 6,
                            Label = "DE_BNUM"
                        },
                        new
                        {
                            Id = 7,
                            Label = "CZ_ICO"
                        },
                        new
                        {
                            Id = 8,
                            Label = "EU_VAT_ID_CZ"
                        },
                        new
                        {
                            Id = 9,
                            Label = "EU_VAT_ID_PL"
                        },
                        new
                        {
                            Id = 10,
                            Label = "EU_VAT_ID_BE"
                        },
                        new
                        {
                            Id = 11,
                            Label = "EU_VAT_ID_CH"
                        },
                        new
                        {
                            Id = 12,
                            Label = "EU_VAT_ID_DK"
                        },
                        new
                        {
                            Id = 13,
                            Label = "EU_VAT_ID_ES"
                        },
                        new
                        {
                            Id = 14,
                            Label = "EU_VAT_ID_GB"
                        },
                        new
                        {
                            Id = 15,
                            Label = "EU_VAT_ID_NO"
                        },
                        new
                        {
                            Id = 16,
                            Label = "BE_ENT_NO"
                        },
                        new
                        {
                            Id = 17,
                            Label = "CVR_DK"
                        },
                        new
                        {
                            Id = 18,
                            Label = "ID_CRN"
                        },
                        new
                        {
                            Id = 19,
                            Label = "NO_ORGID"
                        },
                        new
                        {
                            Id = 20,
                            Label = "LEI_ID"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("BusinessPartnerNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("business_partner_number");

                    b.Property<int>("CompanyStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("DidDocumentLocation")
                        .HasColumnType("text")
                        .HasColumnName("did_document_location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("SelfDescriptionDocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("self_description_document_id");

                    b.Property<string>("Shortname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shortname");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_companies_address_id");

                    b.HasIndex("CompanyStatusId")
                        .HasDatabaseName("ix_companies_company_status_id");

                    b.HasIndex("SelfDescriptionDocumentId")
                        .HasDatabaseName("ix_companies_self_description_document_id");

                    b.ToTable("companies", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_status_id");

                    b.Property<Guid?>("ChecklistProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("checklist_process_id");

                    b.Property<int>("CompanyApplicationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_application_type_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("OnboardingServiceProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("onboarding_service_provider_id");

                    b.HasKey("Id")
                        .HasName("pk_company_applications");

                    b.HasIndex("ApplicationStatusId")
                        .HasDatabaseName("ix_company_applications_application_status_id");

                    b.HasIndex("ChecklistProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_applications_checklist_process_id");

                    b.HasIndex("CompanyApplicationTypeId")
                        .HasDatabaseName("ix_company_applications_company_application_type_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_applications_company_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_company_applications_last_editor_id");

                    b.HasIndex("OnboardingServiceProviderId")
                        .HasDatabaseName("ix_company_applications_onboarding_service_provider_id");

                    b.ToTable("company_applications", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_COMPANYAPPLICATION");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_COMPANYAPPLICATION");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_COMPANYAPPLICATION", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYAPPLICATION\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_COMPANYAPPLICATION$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_company_application20231115\" (\"id\", \"date_created\", \"date_last_changed\", \"application_status_id\", \"company_id\", \"checklist_process_id\", \"company_application_type_id\", \"onboarding_service_provider_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"application_status_id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"checklist_process_id\", \r\n  NEW.\"company_application_type_id\", \r\n  NEW.\"onboarding_service_provider_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_COMPANYAPPLICATION$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_COMPANYAPPLICATION AFTER INSERT\r\nON \"portal\".\"company_applications\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYAPPLICATION\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_COMPANYAPPLICATION", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYAPPLICATION\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_COMPANYAPPLICATION$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_company_application20231115\" (\"id\", \"date_created\", \"date_last_changed\", \"application_status_id\", \"company_id\", \"checklist_process_id\", \"company_application_type_id\", \"onboarding_service_provider_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"application_status_id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"checklist_process_id\", \r\n  NEW.\"company_application_type_id\", \r\n  NEW.\"onboarding_service_provider_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_COMPANYAPPLICATION$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_COMPANYAPPLICATION AFTER UPDATE\r\nON \"portal\".\"company_applications\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYAPPLICATION\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_application_statuses");

                    b.ToTable("company_application_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "CREATED"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ADD_COMPANY_DATA"
                        },
                        new
                        {
                            Id = 3,
                            Label = "INVITE_USER"
                        },
                        new
                        {
                            Id = 4,
                            Label = "SELECT_COMPANY_ROLE"
                        },
                        new
                        {
                            Id = 5,
                            Label = "UPLOAD_DOCUMENTS"
                        },
                        new
                        {
                            Id = 6,
                            Label = "VERIFY"
                        },
                        new
                        {
                            Id = 7,
                            Label = "SUBMITTED"
                        },
                        new
                        {
                            Id = 8,
                            Label = "CONFIRMED"
                        },
                        new
                        {
                            Id = 9,
                            Label = "DECLINED"
                        },
                        new
                        {
                            Id = 10,
                            Label = "CANCELLED_BY_CUSTOMER"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplicationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_application_types");

                    b.ToTable("company_application_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "INTERNAL"
                        },
                        new
                        {
                            Id = 2,
                            Label = "EXTERNAL"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyAssignedRole", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("CompanyId", "CompanyRoleId")
                        .HasName("pk_company_assigned_roles");

                    b.HasIndex("CompanyRoleId")
                        .HasDatabaseName("ix_company_assigned_roles_company_role_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_company_assigned_roles_last_editor_id");

                    b.ToTable("company_assigned_roles", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_COMPANYASSIGNEDROLE");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_COMPANYASSIGNEDROLE");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_COMPANYASSIGNEDROLE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYASSIGNEDROLE\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_COMPANYASSIGNEDROLE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_company_assigned_role2023316\" (\"company_id\", \"company_role_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"company_id\", \r\n  NEW.\"company_role_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_COMPANYASSIGNEDROLE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_COMPANYASSIGNEDROLE AFTER INSERT\r\nON \"portal\".\"company_assigned_roles\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYASSIGNEDROLE\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_COMPANYASSIGNEDROLE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYASSIGNEDROLE\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_COMPANYASSIGNEDROLE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_company_assigned_role2023316\" (\"company_id\", \"company_role_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"company_id\", \r\n  NEW.\"company_role_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_COMPANYASSIGNEDROLE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_COMPANYASSIGNEDROLE AFTER UPDATE\r\nON \"portal\".\"company_assigned_roles\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYASSIGNEDROLE\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyAssignedUseCase", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.HasKey("CompanyId", "UseCaseId")
                        .HasName("pk_company_assigned_use_cases");

                    b.HasIndex("UseCaseId")
                        .HasDatabaseName("ix_company_assigned_use_cases_use_case_id");

                    b.ToTable("company_assigned_use_cases", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyIdentifier", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("UniqueIdentifierId")
                        .HasColumnType("integer")
                        .HasColumnName("unique_identifier_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("CompanyId", "UniqueIdentifierId")
                        .HasName("pk_company_identifiers");

                    b.HasIndex("UniqueIdentifierId")
                        .HasDatabaseName("ix_company_identifiers_unique_identifier_id");

                    b.ToTable("company_identifiers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyIdentityProvider", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("IdentityProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_provider_id");

                    b.HasKey("CompanyId", "IdentityProviderId")
                        .HasName("pk_company_identity_providers");

                    b.HasIndex("IdentityProviderId")
                        .HasDatabaseName("ix_company_identity_providers_identity_provider_id");

                    b.ToTable("company_identity_providers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<byte[]>("ClientSecret")
                        .HasColumnType("bytea")
                        .HasColumnName("client_secret");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int?>("EncryptionMode")
                        .HasColumnType("integer")
                        .HasColumnName("encryption_mode");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("IdpName")
                        .HasColumnType("text")
                        .HasColumnName("idp_name");

                    b.Property<byte[]>("InitializationVector")
                        .HasColumnType("bytea")
                        .HasColumnName("initialization_vector");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organisation_name");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<string>("ServiceAccountUserId")
                        .HasColumnType("text")
                        .HasColumnName("service_account_user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_company_invitations");

                    b.HasIndex("ApplicationId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_invitations_application_id");

                    b.HasIndex("ProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_invitations_process_id");

                    b.ToTable("company_invitations", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_roles");

                    b.ToTable("company_roles", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "ACTIVE_PARTICIPANT"
                        },
                        new
                        {
                            Id = 2,
                            Label = "APP_PROVIDER"
                        },
                        new
                        {
                            Id = 3,
                            Label = "SERVICE_PROVIDER"
                        },
                        new
                        {
                            Id = 4,
                            Label = "OPERATOR"
                        },
                        new
                        {
                            Id = 5,
                            Label = "ONBOARDING_SERVICE_PROVIDER"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleAssignedRoleCollection", b =>
                {
                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.Property<Guid>("UserRoleCollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_collection_id");

                    b.HasKey("CompanyRoleId")
                        .HasName("pk_company_role_assigned_role_collections");

                    b.HasIndex("UserRoleCollectionId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_role_assigned_role_collections_user_role_collection");

                    b.ToTable("company_role_assigned_role_collections", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleDescription", b =>
                {
                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasKey("CompanyRoleId", "LanguageShortName")
                        .HasName("pk_company_role_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_company_role_descriptions_language_short_name");

                    b.ToTable("company_role_descriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleRegistrationData", b =>
                {
                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.Property<bool>("IsRegistrationRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_registration_role");

                    b.HasKey("CompanyRoleId")
                        .HasName("pk_company_role_registration_data");

                    b.ToTable("company_role_registration_data", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientClientId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_client_id");

                    b.Property<int>("CompanyServiceAccountKindId")
                        .HasColumnType("integer")
                        .HasColumnName("company_service_account_kind_id");

                    b.Property<int>("CompanyServiceAccountTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_service_account_type_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("OfferSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_company_service_accounts");

                    b.HasIndex("ClientClientId")
                        .HasDatabaseName("ix_company_service_accounts_client_client_id")
                        .HasFilter("client_client_id is not null AND company_service_account_kind_id = 1");

                    b.HasIndex("CompanyServiceAccountKindId")
                        .HasDatabaseName("ix_company_service_accounts_company_service_account_kind_id");

                    b.HasIndex("CompanyServiceAccountTypeId")
                        .HasDatabaseName("ix_company_service_accounts_company_service_account_type_id");

                    b.HasIndex("OfferSubscriptionId")
                        .HasDatabaseName("ix_company_service_accounts_offer_subscription_id");

                    b.ToTable("company_service_accounts", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccountKind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_service_account_kindes");

                    b.ToTable("company_service_account_kindes", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "INTERNAL"
                        },
                        new
                        {
                            Id = 2,
                            Label = "EXTERNAL"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccountType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_service_account_types");

                    b.ToTable("company_service_account_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "MANAGED"
                        },
                        new
                        {
                            Id = 2,
                            Label = "OWN"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_statuses");

                    b.ToTable("company_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "REJECTED"
                        },
                        new
                        {
                            Id = 4,
                            Label = "INACTIVE"
                        },
                        new
                        {
                            Id = 5,
                            Label = "DELETED"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<byte[]>("Lastlogin")
                        .HasColumnType("bytea")
                        .HasColumnName("lastlogin");

                    b.Property<string>("Lastname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.HasKey("Id")
                        .HasName("pk_company_users");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_company_users_last_editor_id");

                    b.ToTable("company_users", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_COMPANYUSER");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_COMPANYUSER");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_COMPANYUSER", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYUSER\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_COMPANYUSER$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_company_user20230523\" (\"id\", \"email\", \"firstname\", \"lastlogin\", \"lastname\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"email\", \r\n  NEW.\"firstname\", \r\n  NEW.\"lastlogin\", \r\n  NEW.\"lastname\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_COMPANYUSER$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_COMPANYUSER AFTER INSERT\r\nON \"portal\".\"company_users\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_COMPANYUSER\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_COMPANYUSER", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYUSER\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_COMPANYUSER$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_company_user20230523\" (\"id\", \"email\", \"firstname\", \"lastlogin\", \"lastname\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"email\", \r\n  NEW.\"firstname\", \r\n  NEW.\"lastlogin\", \r\n  NEW.\"lastname\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_COMPANYUSER$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_COMPANYUSER AFTER UPDATE\r\nON \"portal\".\"company_users\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYUSER\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedAppFavourite", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.HasKey("CompanyUserId", "AppId")
                        .HasName("pk_company_user_assigned_app_favourites");

                    b.HasIndex("AppId")
                        .HasDatabaseName("ix_company_user_assigned_app_favourites_app_id");

                    b.ToTable("company_user_assigned_app_favourites", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedBusinessPartner", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<string>("BusinessPartnerNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("business_partner_number");

                    b.HasKey("CompanyUserId", "BusinessPartnerNumber")
                        .HasName("pk_company_user_assigned_business_partners");

                    b.ToTable("company_user_assigned_business_partners", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedIdentityProvider", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<Guid>("IdentityProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_provider_id");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("CompanyUserId", "IdentityProviderId")
                        .HasName("pk_company_user_assigned_identity_providers");

                    b.HasIndex("IdentityProviderId")
                        .HasDatabaseName("ix_company_user_assigned_identity_providers_identity_provider_");

                    b.ToTable("company_user_assigned_identity_providers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedProcess", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.HasKey("CompanyUserId", "ProcessId")
                        .HasName("pk_company_user_assigned_processes");

                    b.HasIndex("CompanyUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_user_assigned_processes_company_user_id");

                    b.HasIndex("ProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_user_assigned_processes_process_id");

                    b.ToTable("company_user_assigned_processes", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyWalletData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthenticationServiceUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authentication_service_url");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<byte[]>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("client_secret");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Did")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("did");

                    b.Property<JsonDocument>("DidDocument")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("did_document");

                    b.Property<int>("EncryptionMode")
                        .HasColumnType("integer")
                        .HasColumnName("encryption_mode");

                    b.Property<byte[]>("InitializationVector")
                        .HasColumnType("bytea")
                        .HasColumnName("initialization_vector");

                    b.HasKey("Id")
                        .HasName("pk_company_wallet_datas");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_wallet_datas_company_id");

                    b.ToTable("company_wallet_datas", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CompanyServiceAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_service_account_id");

                    b.Property<string>("ConnectorUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("connector_url");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<Guid?>("SelfDescriptionDocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("self_description_document_id");

                    b.Property<string>("SelfDescriptionMessage")
                        .HasColumnType("text")
                        .HasColumnName("self_description_message");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_connectors");

                    b.HasIndex("CompanyServiceAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_connectors_company_service_account_id");

                    b.HasIndex("HostId")
                        .HasDatabaseName("ix_connectors_host_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_connectors_last_editor_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_connectors_location_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_connectors_provider_id");

                    b.HasIndex("SelfDescriptionDocumentId")
                        .IsUnique()
                        .HasDatabaseName("ix_connectors_self_description_document_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_connectors_status_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_connectors_type_id");

                    b.ToTable("connectors", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_CONNECTOR");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_CONNECTOR");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_CONNECTOR", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_CONNECTOR\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_CONNECTOR$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_connector20231115\" (\"id\", \"name\", \"connector_url\", \"type_id\", \"status_id\", \"provider_id\", \"host_id\", \"self_description_document_id\", \"location_id\", \"self_description_message\", \"date_last_changed\", \"company_service_account_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"name\", \r\n  NEW.\"connector_url\", \r\n  NEW.\"type_id\", \r\n  NEW.\"status_id\", \r\n  NEW.\"provider_id\", \r\n  NEW.\"host_id\", \r\n  NEW.\"self_description_document_id\", \r\n  NEW.\"location_id\", \r\n  NEW.\"self_description_message\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"company_service_account_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_CONNECTOR$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_CONNECTOR AFTER INSERT\r\nON \"portal\".\"connectors\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_CONNECTOR\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_CONNECTOR", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_CONNECTOR\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_CONNECTOR$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_connector20231115\" (\"id\", \"name\", \"connector_url\", \"type_id\", \"status_id\", \"provider_id\", \"host_id\", \"self_description_document_id\", \"location_id\", \"self_description_message\", \"date_last_changed\", \"company_service_account_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"name\", \r\n  NEW.\"connector_url\", \r\n  NEW.\"type_id\", \r\n  NEW.\"status_id\", \r\n  NEW.\"provider_id\", \r\n  NEW.\"host_id\", \r\n  NEW.\"self_description_document_id\", \r\n  NEW.\"location_id\", \r\n  NEW.\"self_description_message\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"company_service_account_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_CONNECTOR$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_CONNECTOR AFTER UPDATE\r\nON \"portal\".\"connectors\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_CONNECTOR\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorAssignedOfferSubscription", b =>
                {
                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("connector_id");

                    b.Property<Guid>("OfferSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_subscription_id");

                    b.HasKey("ConnectorId", "OfferSubscriptionId")
                        .HasName("pk_connector_assigned_offer_subscriptions");

                    b.HasIndex("OfferSubscriptionId")
                        .HasDatabaseName("ix_connector_assigned_offer_subscriptions_offer_subscription_id");

                    b.ToTable("connector_assigned_offer_subscriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_connector_statuses");

                    b.ToTable("connector_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_connector_types");

                    b.ToTable("connector_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "COMPANY_CONNECTOR"
                        },
                        new
                        {
                            Id = 2,
                            Label = "CONNECTOR_AS_A_SERVICE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<int>("ConsentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("consent_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("Target")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("target");

                    b.HasKey("Id")
                        .HasName("pk_consents");

                    b.HasIndex("AgreementId")
                        .HasDatabaseName("ix_consents_agreement_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_consents_company_id");

                    b.HasIndex("CompanyUserId")
                        .HasDatabaseName("ix_consents_company_user_id");

                    b.HasIndex("ConsentStatusId")
                        .HasDatabaseName("ix_consents_consent_status_id");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_consents_document_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_consents_last_editor_id");

                    b.ToTable("consents", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_CONSENT");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_CONSENT");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_CONSENT", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_CONSENT\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_CONSENT$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_consent20231115\" (\"id\", \"date_created\", \"comment\", \"consent_status_id\", \"target\", \"agreement_id\", \"company_id\", \"document_id\", \"company_user_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"comment\", \r\n  NEW.\"consent_status_id\", \r\n  NEW.\"target\", \r\n  NEW.\"agreement_id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"document_id\", \r\n  NEW.\"company_user_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_CONSENT$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_CONSENT AFTER INSERT\r\nON \"portal\".\"consents\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_CONSENT\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_CONSENT", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_CONSENT\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_CONSENT$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_consent20231115\" (\"id\", \"date_created\", \"comment\", \"consent_status_id\", \"target\", \"agreement_id\", \"company_id\", \"document_id\", \"company_user_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"comment\", \r\n  NEW.\"consent_status_id\", \r\n  NEW.\"target\", \r\n  NEW.\"agreement_id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"document_id\", \r\n  NEW.\"company_user_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_CONSENT$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_CONSENT AFTER UPDATE\r\nON \"portal\".\"consents\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_CONSENT\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConsentAssignedOffer", b =>
                {
                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("consent_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.HasKey("ConsentId", "OfferId")
                        .HasName("pk_consent_assigned_offers");

                    b.HasIndex("OfferId")
                        .HasDatabaseName("ix_consent_assigned_offers_offer_id");

                    b.ToTable("consent_assigned_offers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConsentAssignedOfferSubscription", b =>
                {
                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("consent_id");

                    b.Property<Guid>("OfferSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_subscription_id");

                    b.HasKey("ConsentId", "OfferSubscriptionId")
                        .HasName("pk_consent_assigned_offer_subscriptions");

                    b.HasIndex("OfferSubscriptionId")
                        .HasDatabaseName("ix_consent_assigned_offer_subscriptions_offer_subscription_id");

                    b.ToTable("consent_assigned_offer_subscriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConsentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_consent_statuses");

                    b.ToTable("consent_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 2,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Country", b =>
                {
                    b.Property<string>("Alpha2Code")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("alpha2code")
                        .IsFixedLength()
                        .HasAnnotation("Relational:JsonPropertyName", "alpha2code");

                    b.Property<string>("Alpha3Code")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("alpha3code")
                        .IsFixedLength()
                        .HasAnnotation("Relational:JsonPropertyName", "alpha3code");

                    b.HasKey("Alpha2Code")
                        .HasName("pk_countries");

                    b.ToTable("countries", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CountryAssignedIdentifier", b =>
                {
                    b.Property<string>("CountryAlpha2Code")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("country_alpha2code")
                        .HasAnnotation("Relational:JsonPropertyName", "country_alpha2code");

                    b.Property<int>("UniqueIdentifierId")
                        .HasColumnType("integer")
                        .HasColumnName("unique_identifier_id");

                    b.Property<int?>("BpdmIdentifierId")
                        .HasColumnType("integer")
                        .HasColumnName("bpdm_identifier_id");

                    b.HasKey("CountryAlpha2Code", "UniqueIdentifierId")
                        .HasName("pk_country_assigned_identifiers");

                    b.HasIndex("BpdmIdentifierId")
                        .HasDatabaseName("ix_country_assigned_identifiers_bpdm_identifier_id");

                    b.HasIndex("UniqueIdentifierId")
                        .HasDatabaseName("ix_country_assigned_identifiers_unique_identifier_id");

                    b.ToTable("country_assigned_identifiers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CountryLongName", b =>
                {
                    b.Property<string>("Alpha2Code")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("alpha2code")
                        .HasAnnotation("Relational:JsonPropertyName", "alpha2code");

                    b.Property<string>("ShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("short_name");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("long_name");

                    b.HasKey("Alpha2Code", "ShortName")
                        .HasName("pk_country_long_names");

                    b.HasIndex("ShortName")
                        .HasDatabaseName("ix_country_long_names_short_name");

                    b.ToTable("country_long_names", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DimCompanyServiceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthenticationServiceUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authentication_service_url");

                    b.Property<byte[]>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("client_secret");

                    b.Property<int>("EncryptionMode")
                        .HasColumnType("integer")
                        .HasColumnName("encryption_mode");

                    b.Property<byte[]>("InitializationVector")
                        .HasColumnType("bytea")
                        .HasColumnName("initialization_vector");

                    b.HasKey("Id")
                        .HasName("pk_dim_company_service_accounts");

                    b.ToTable("dim_company_service_accounts", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DimUserCreationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid>("ServiceAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_account_id");

                    b.HasKey("Id")
                        .HasName("pk_dim_user_creation_data");

                    b.HasIndex("ProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_dim_user_creation_data_process_id");

                    b.HasIndex("ServiceAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_dim_user_creation_data_service_account_id");

                    b.ToTable("dim_user_creation_data", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<byte[]>("DocumentContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("document_content");

                    b.Property<byte[]>("DocumentHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("document_hash");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_name");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("CompanyUserId")
                        .HasDatabaseName("ix_documents_company_user_id");

                    b.HasIndex("DocumentStatusId")
                        .HasDatabaseName("ix_documents_document_status_id");

                    b.HasIndex("DocumentTypeId")
                        .HasDatabaseName("ix_documents_document_type_id");

                    b.HasIndex("MediaTypeId")
                        .HasDatabaseName("ix_documents_media_type_id");

                    b.ToTable("documents", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_DOCUMENT");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_DOCUMENT");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_DOCUMENT", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_DOCUMENT\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_DOCUMENT$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_document20231115\" (\"id\", \"date_created\", \"document_hash\", \"document_content\", \"document_name\", \"media_type_id\", \"document_type_id\", \"document_status_id\", \"company_user_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"document_hash\", \r\n  NEW.\"document_content\", \r\n  NEW.\"document_name\", \r\n  NEW.\"media_type_id\", \r\n  NEW.\"document_type_id\", \r\n  NEW.\"document_status_id\", \r\n  NEW.\"company_user_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_DOCUMENT$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_DOCUMENT AFTER INSERT\r\nON \"portal\".\"documents\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_DOCUMENT\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_DOCUMENT", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_DOCUMENT\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_DOCUMENT$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_document20231115\" (\"id\", \"date_created\", \"document_hash\", \"document_content\", \"document_name\", \"media_type_id\", \"document_type_id\", \"document_status_id\", \"company_user_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"document_hash\", \r\n  NEW.\"document_content\", \r\n  NEW.\"document_name\", \r\n  NEW.\"media_type_id\", \r\n  NEW.\"document_type_id\", \r\n  NEW.\"document_status_id\", \r\n  NEW.\"company_user_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_DOCUMENT$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_DOCUMENT AFTER UPDATE\r\nON \"portal\".\"documents\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_DOCUMENT\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_document_status");

                    b.ToTable("document_status", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Label = "LOCKED"
                        },
                        new
                        {
                            Id = 3,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_document_types");

                    b.ToTable("document_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "CX_FRAME_CONTRACT"
                        },
                        new
                        {
                            Id = 2,
                            Label = "COMMERCIAL_REGISTER_EXTRACT"
                        },
                        new
                        {
                            Id = 3,
                            Label = "APP_CONTRACT"
                        },
                        new
                        {
                            Id = 4,
                            Label = "CONFORMITY_APPROVAL_REGISTRATION"
                        },
                        new
                        {
                            Id = 5,
                            Label = "ADDITIONAL_DETAILS"
                        },
                        new
                        {
                            Id = 6,
                            Label = "APP_LEADIMAGE"
                        },
                        new
                        {
                            Id = 7,
                            Label = "APP_IMAGE"
                        },
                        new
                        {
                            Id = 8,
                            Label = "SELF_DESCRIPTION"
                        },
                        new
                        {
                            Id = 9,
                            Label = "APP_TECHNICAL_INFORMATION"
                        },
                        new
                        {
                            Id = 10,
                            Label = "CONFORMITY_APPROVAL_CONNECTOR"
                        },
                        new
                        {
                            Id = 11,
                            Label = "CONFORMITY_APPROVAL_BUSINESS_APPS"
                        },
                        new
                        {
                            Id = 12,
                            Label = "CONFORMITY_APPROVAL_SERVICES"
                        },
                        new
                        {
                            Id = 13,
                            Label = "SERVICE_LEADIMAGE"
                        },
                        new
                        {
                            Id = 14,
                            Label = "PRESENTATION"
                        },
                        new
                        {
                            Id = 15,
                            Label = "COMPANY_CERTIFICATE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IamClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_client_id");

                    b.HasKey("Id")
                        .HasName("pk_iam_clients");

                    b.HasIndex("ClientClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_iam_clients_client_client_id");

                    b.ToTable("iam_clients", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IamIdentityProvider", b =>
                {
                    b.Property<string>("IamIdpAlias")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("iam_idp_alias");

                    b.Property<Guid>("IdentityProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_provider_id");

                    b.Property<string>("MetadataUrl")
                        .HasColumnType("text")
                        .HasColumnName("metadata_url");

                    b.HasKey("IamIdpAlias")
                        .HasName("pk_iam_identity_providers");

                    b.HasIndex("IdentityProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_iam_identity_providers_identity_provider_id");

                    b.ToTable("iam_identity_providers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<int>("IdentityTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_type_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("UserEntityId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_entity_id");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("user_status_id")
                        .HasAnnotation("Relational:JsonPropertyName", "user_status_id");

                    b.HasKey("Id")
                        .HasName("pk_identities");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_identities_company_id");

                    b.HasIndex("IdentityTypeId")
                        .HasDatabaseName("ix_identities_identity_type_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_identities_last_editor_id");

                    b.HasIndex("UserEntityId")
                        .IsUnique()
                        .HasDatabaseName("ix_identities_user_entity_id");

                    b.HasIndex("UserStatusId")
                        .HasDatabaseName("ix_identities_user_status_id");

                    b.ToTable("identities", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_IDENTITY");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_IDENTITY");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_IDENTITY", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_IDENTITY\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_IDENTITY$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_identity20231115\" (\"id\", \"date_created\", \"company_id\", \"user_status_id\", \"user_entity_id\", \"identity_type_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"company_id\", \r\n  NEW.\"user_status_id\", \r\n  NEW.\"user_entity_id\", \r\n  NEW.\"identity_type_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_IDENTITY$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_IDENTITY AFTER INSERT\r\nON \"portal\".\"identities\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_IDENTITY\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_IDENTITY", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_IDENTITY\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_IDENTITY$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_identity20231115\" (\"id\", \"date_created\", \"company_id\", \"user_status_id\", \"user_entity_id\", \"identity_type_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"company_id\", \r\n  NEW.\"user_status_id\", \r\n  NEW.\"user_entity_id\", \r\n  NEW.\"identity_type_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_IDENTITY$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_IDENTITY AFTER UPDATE\r\nON \"portal\".\"identities\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_IDENTITY\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityAssignedRole", b =>
                {
                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("IdentityId", "UserRoleId")
                        .HasName("pk_identity_assigned_roles");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_identity_assigned_roles_last_editor_id");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_identity_assigned_roles_user_role_id");

                    b.ToTable("identity_assigned_roles", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_IDENTITYASSIGNEDROLE");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_IDENTITYASSIGNEDROLE");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_IDENTITYASSIGNEDROLE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_IDENTITYASSIGNEDROLE\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_IDENTITYASSIGNEDROLE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_identity_assigned_role20230522\" (\"identity_id\", \"user_role_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"identity_id\", \r\n  NEW.\"user_role_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_IDENTITYASSIGNEDROLE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_IDENTITYASSIGNEDROLE AFTER INSERT\r\nON \"portal\".\"identity_assigned_roles\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_IDENTITYASSIGNEDROLE\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_IDENTITYASSIGNEDROLE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_IDENTITYASSIGNEDROLE\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_IDENTITYASSIGNEDROLE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_identity_assigned_role20230522\" (\"identity_id\", \"user_role_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"identity_id\", \r\n  NEW.\"user_role_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_IDENTITYASSIGNEDROLE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_IDENTITYASSIGNEDROLE AFTER UPDATE\r\nON \"portal\".\"identity_assigned_roles\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_IDENTITYASSIGNEDROLE\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int>("IdentityProviderCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_provider_category_id");

                    b.Property<int>("IdentityProviderTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_provider_type_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_providers");

                    b.HasIndex("IdentityProviderCategoryId")
                        .HasDatabaseName("ix_identity_providers_identity_provider_category_id");

                    b.HasIndex("IdentityProviderTypeId")
                        .HasDatabaseName("ix_identity_providers_identity_provider_type_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_identity_providers_owner_id");

                    b.ToTable("identity_providers", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderAssignedProcess", b =>
                {
                    b.Property<Guid>("IdentityProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_provider_id");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.HasKey("IdentityProviderId", "ProcessId")
                        .HasName("pk_identity_provider_assigned_processes");

                    b.HasIndex("IdentityProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_identity_provider_assigned_processes_identity_provider_id");

                    b.HasIndex("ProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_identity_provider_assigned_processes_process_id");

                    b.ToTable("identity_provider_assigned_processes", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_identity_provider_categories");

                    b.ToTable("identity_provider_categories", "portal");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Label = "KEYCLOAK_OIDC"
                        },
                        new
                        {
                            Id = 3,
                            Label = "KEYCLOAK_SAML"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_identity_provider_types");

                    b.ToTable("identity_provider_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "OWN"
                        },
                        new
                        {
                            Id = 2,
                            Label = "MANAGED"
                        },
                        new
                        {
                            Id = 3,
                            Label = "SHARED"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_identity_type");

                    b.ToTable("identity_type", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "COMPANY_USER"
                        },
                        new
                        {
                            Id = 2,
                            Label = "COMPANY_SERVICE_ACCOUNT"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityUserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_identity_user_statuses");

                    b.ToTable("identity_user_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 2,
                            Label = "INACTIVE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "DELETED"
                        },
                        new
                        {
                            Id = 4,
                            Label = "PENDING"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_application_id");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int>("InvitationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("invitation_status_id");

                    b.HasKey("Id")
                        .HasName("pk_invitations");

                    b.HasIndex("CompanyApplicationId")
                        .HasDatabaseName("ix_invitations_company_application_id");

                    b.HasIndex("CompanyUserId")
                        .HasDatabaseName("ix_invitations_company_user_id");

                    b.HasIndex("InvitationStatusId")
                        .HasDatabaseName("ix_invitations_invitation_status_id");

                    b.ToTable("invitations", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.InvitationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_invitation_statuses");

                    b.ToTable("invitation_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "CREATED"
                        },
                        new
                        {
                            Id = 2,
                            Label = "PENDING"
                        },
                        new
                        {
                            Id = 3,
                            Label = "ACCEPTED"
                        },
                        new
                        {
                            Id = 4,
                            Label = "DECLINED"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", b =>
                {
                    b.Property<string>("ShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("short_name")
                        .IsFixedLength();

                    b.HasKey("ShortName")
                        .HasName("pk_languages");

                    b.ToTable("languages", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.LanguageLongName", b =>
                {
                    b.Property<string>("ShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("short_name")
                        .IsFixedLength();

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name")
                        .IsFixedLength();

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("long_name");

                    b.HasKey("ShortName", "LanguageShortName")
                        .HasName("pk_language_long_names");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_language_long_names_language_short_name");

                    b.ToTable("language_long_names", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_license_types");

                    b.ToTable("license_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "COTS"
                        },
                        new
                        {
                            Id = 2,
                            Label = "FOSS"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MailingInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EncryptionMode")
                        .HasColumnType("integer")
                        .HasColumnName("encryption_mode");

                    b.Property<byte[]>("InitializationVector")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("initialization_vector");

                    b.Property<byte[]>("MailParameters")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("mail_parameters");

                    b.Property<int>("MailingStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("mailing_status_id");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.HasKey("Id")
                        .HasName("pk_mailing_informations");

                    b.HasIndex("MailingStatusId")
                        .HasDatabaseName("ix_mailing_informations_mailing_status_id");

                    b.HasIndex("ProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_mailing_informations_process_id");

                    b.ToTable("mailing_informations", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MailingStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_mailing_statuses");

                    b.ToTable("mailing_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Label = "SENT"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_media_types");

                    b.ToTable("media_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "JPEG"
                        },
                        new
                        {
                            Id = 2,
                            Label = "GIF"
                        },
                        new
                        {
                            Id = 3,
                            Label = "PNG"
                        },
                        new
                        {
                            Id = 4,
                            Label = "SVG"
                        },
                        new
                        {
                            Id = 5,
                            Label = "TIFF"
                        },
                        new
                        {
                            Id = 6,
                            Label = "PDF"
                        },
                        new
                        {
                            Id = 7,
                            Label = "JSON"
                        },
                        new
                        {
                            Id = 8,
                            Label = "PEM"
                        },
                        new
                        {
                            Id = 9,
                            Label = "CA_CERT"
                        },
                        new
                        {
                            Id = 10,
                            Label = "PKX_CER"
                        },
                        new
                        {
                            Id = 11,
                            Label = "OCTET"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NetworkRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<Guid>("OnboardingServiceProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("onboarding_service_provider_id");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.HasKey("Id")
                        .HasName("pk_network_registrations");

                    b.HasIndex("ApplicationId")
                        .IsUnique()
                        .HasDatabaseName("ix_network_registrations_application_id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasDatabaseName("ix_network_registrations_company_id");

                    b.HasIndex("OnboardingServiceProviderId")
                        .HasDatabaseName("ix_network_registrations_onboarding_service_provider_id");

                    b.HasIndex("ProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_network_registrations_process_id");

                    b.HasIndex("ExternalId", "OnboardingServiceProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_network_registrations_external_id_onboarding_service_provid");

                    b.ToTable("network_registrations", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_user_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<bool?>("Done")
                        .HasColumnType("boolean")
                        .HasColumnName("done");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("notification_type_id");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("CreatorUserId")
                        .HasDatabaseName("ix_notifications_creator_user_id");

                    b.HasIndex("NotificationTypeId")
                        .HasDatabaseName("ix_notifications_notification_type_id");

                    b.HasIndex("ReceiverUserId")
                        .HasDatabaseName("ix_notifications_receiver_user_id");

                    b.ToTable("notifications", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationTopic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_notification_topic");

                    b.ToTable("notification_topic", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "INFO"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ACTION"
                        },
                        new
                        {
                            Id = 3,
                            Label = "OFFER"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_notification_type");

                    b.ToTable("notification_type", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "INFO"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ACTION"
                        },
                        new
                        {
                            Id = 3,
                            Label = "WELCOME"
                        },
                        new
                        {
                            Id = 4,
                            Label = "WELCOME_USE_CASES"
                        },
                        new
                        {
                            Id = 5,
                            Label = "WELCOME_SERVICE_PROVIDER"
                        },
                        new
                        {
                            Id = 6,
                            Label = "WELCOME_CONNECTOR_REGISTRATION"
                        },
                        new
                        {
                            Id = 7,
                            Label = "WELCOME_APP_MARKETPLACE"
                        },
                        new
                        {
                            Id = 8,
                            Label = "APP_SUBSCRIPTION_REQUEST"
                        },
                        new
                        {
                            Id = 9,
                            Label = "APP_SUBSCRIPTION_ACTIVATION"
                        },
                        new
                        {
                            Id = 10,
                            Label = "CONNECTOR_REGISTERED"
                        },
                        new
                        {
                            Id = 11,
                            Label = "APP_RELEASE_REQUEST"
                        },
                        new
                        {
                            Id = 12,
                            Label = "TECHNICAL_USER_CREATION"
                        },
                        new
                        {
                            Id = 13,
                            Label = "SERVICE_REQUEST"
                        },
                        new
                        {
                            Id = 14,
                            Label = "SERVICE_ACTIVATION"
                        },
                        new
                        {
                            Id = 15,
                            Label = "APP_ROLE_ADDED"
                        },
                        new
                        {
                            Id = 16,
                            Label = "APP_RELEASE_APPROVAL"
                        },
                        new
                        {
                            Id = 17,
                            Label = "SERVICE_RELEASE_REQUEST"
                        },
                        new
                        {
                            Id = 18,
                            Label = "SERVICE_RELEASE_APPROVAL"
                        },
                        new
                        {
                            Id = 19,
                            Label = "APP_RELEASE_REJECTION"
                        },
                        new
                        {
                            Id = 20,
                            Label = "SERVICE_RELEASE_REJECTION"
                        },
                        new
                        {
                            Id = 21,
                            Label = "ROLE_UPDATE_CORE_OFFER"
                        },
                        new
                        {
                            Id = 22,
                            Label = "ROLE_UPDATE_APP_OFFER"
                        },
                        new
                        {
                            Id = 23,
                            Label = "SUBSCRIPTION_URL_UPDATE"
                        },
                        new
                        {
                            Id = 24,
                            Label = "CREDENTIAL_APPROVAL"
                        },
                        new
                        {
                            Id = 25,
                            Label = "CREDENTIAL_REJECTED"
                        },
                        new
                        {
                            Id = 26,
                            Label = "CREDENTIAL_EXPIRY"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationTypeAssignedTopic", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("notification_type_id");

                    b.Property<int>("NotificationTopicId")
                        .HasColumnType("integer")
                        .HasColumnName("notification_topic_id");

                    b.HasKey("NotificationTypeId", "NotificationTopicId")
                        .HasName("pk_notification_type_assigned_topics");

                    b.HasIndex("NotificationTopicId")
                        .HasDatabaseName("ix_notification_type_assigned_topics_notification_topic_id");

                    b.HasIndex("NotificationTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_type_assigned_topics_notification_type_id");

                    b.ToTable("notification_type_assigned_topics", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_number");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<DateTimeOffset?>("DateReleased")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_released");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<int>("LicenseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("license_type_id");

                    b.Property<string>("MarketingUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("marketing_url");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("OfferStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_status_id");

                    b.Property<int>("OfferTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_type_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("provider");

                    b.Property<Guid?>("ProviderCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_company_id");

                    b.Property<Guid?>("SalesManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("sales_manager_id");

                    b.HasKey("Id")
                        .HasName("pk_offers");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_offers_last_editor_id");

                    b.HasIndex("LicenseTypeId")
                        .HasDatabaseName("ix_offers_license_type_id");

                    b.HasIndex("OfferStatusId")
                        .HasDatabaseName("ix_offers_offer_status_id");

                    b.HasIndex("OfferTypeId")
                        .HasDatabaseName("ix_offers_offer_type_id");

                    b.HasIndex("ProviderCompanyId")
                        .HasDatabaseName("ix_offers_provider_company_id");

                    b.HasIndex("SalesManagerId")
                        .HasDatabaseName("ix_offers_sales_manager_id");

                    b.ToTable("offers", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_OFFER");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_OFFER");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_OFFER", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_OFFER\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_OFFER$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_offer20231115\" (\"id\", \"name\", \"date_created\", \"date_released\", \"marketing_url\", \"contact_email\", \"contact_number\", \"provider\", \"offer_type_id\", \"sales_manager_id\", \"provider_company_id\", \"offer_status_id\", \"license_type_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"name\", \r\n  NEW.\"date_created\", \r\n  NEW.\"date_released\", \r\n  NEW.\"marketing_url\", \r\n  NEW.\"contact_email\", \r\n  NEW.\"contact_number\", \r\n  NEW.\"provider\", \r\n  NEW.\"offer_type_id\", \r\n  NEW.\"sales_manager_id\", \r\n  NEW.\"provider_company_id\", \r\n  NEW.\"offer_status_id\", \r\n  NEW.\"license_type_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_OFFER$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_OFFER AFTER INSERT\r\nON \"portal\".\"offers\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_OFFER\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_OFFER", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_OFFER\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_OFFER$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_offer20231115\" (\"id\", \"name\", \"date_created\", \"date_released\", \"marketing_url\", \"contact_email\", \"contact_number\", \"provider\", \"offer_type_id\", \"sales_manager_id\", \"provider_company_id\", \"offer_status_id\", \"license_type_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"name\", \r\n  NEW.\"date_created\", \r\n  NEW.\"date_released\", \r\n  NEW.\"marketing_url\", \r\n  NEW.\"contact_email\", \r\n  NEW.\"contact_number\", \r\n  NEW.\"provider\", \r\n  NEW.\"offer_type_id\", \r\n  NEW.\"sales_manager_id\", \r\n  NEW.\"provider_company_id\", \r\n  NEW.\"offer_status_id\", \r\n  NEW.\"license_type_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_OFFER$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_OFFER AFTER UPDATE\r\nON \"portal\".\"offers\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_OFFER\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferAssignedDocument", b =>
                {
                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.HasKey("OfferId", "DocumentId")
                        .HasName("pk_offer_assigned_documents");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_offer_assigned_documents_document_id");

                    b.ToTable("offer_assigned_documents", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferAssignedLicense", b =>
                {
                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<Guid>("OfferLicenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_license_id");

                    b.HasKey("OfferId", "OfferLicenseId")
                        .HasName("pk_offer_assigned_licenses");

                    b.HasIndex("OfferLicenseId")
                        .HasDatabaseName("ix_offer_assigned_licenses_offer_license_id");

                    b.ToTable("offer_assigned_licenses", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferAssignedPrivacyPolicy", b =>
                {
                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<int>("PrivacyPolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("privacy_policy_id");

                    b.HasKey("OfferId", "PrivacyPolicyId")
                        .HasName("pk_offer_assigned_privacy_policies");

                    b.HasIndex("PrivacyPolicyId")
                        .HasDatabaseName("ix_offer_assigned_privacy_policies_privacy_policy_id");

                    b.ToTable("offer_assigned_privacy_policies", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferDescription", b =>
                {
                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("DescriptionLong")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description_long");

                    b.Property<string>("DescriptionShort")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description_short");

                    b.HasKey("OfferId", "LanguageShortName")
                        .HasName("pk_offer_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_offer_descriptions_language_short_name");

                    b.ToTable("offer_descriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Licensetext")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("licensetext");

                    b.HasKey("Id")
                        .HasName("pk_offer_licenses");

                    b.ToTable("offer_licenses", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_offer_statuses");

                    b.ToTable("offer_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "CREATED"
                        },
                        new
                        {
                            Id = 2,
                            Label = "IN_REVIEW"
                        },
                        new
                        {
                            Id = 3,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 4,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<int>("OfferSubscriptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("offer_subscription_status_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid")
                        .HasColumnName("requester_id");

                    b.HasKey("Id")
                        .HasName("pk_offer_subscriptions");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_offer_subscriptions_company_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_offer_subscriptions_last_editor_id");

                    b.HasIndex("OfferId")
                        .HasDatabaseName("ix_offer_subscriptions_offer_id");

                    b.HasIndex("OfferSubscriptionStatusId")
                        .HasDatabaseName("ix_offer_subscriptions_offer_subscription_status_id");

                    b.HasIndex("ProcessId")
                        .IsUnique()
                        .HasDatabaseName("ix_offer_subscriptions_process_id");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_offer_subscriptions_requester_id");

                    b.ToTable("offer_subscriptions", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_OFFERSUBSCRIPTION");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_OFFERSUBSCRIPTION");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_OFFERSUBSCRIPTION", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_OFFERSUBSCRIPTION\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_OFFERSUBSCRIPTION$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_offer_subscription20231115\" (\"id\", \"company_id\", \"offer_id\", \"offer_subscription_status_id\", \"display_name\", \"description\", \"requester_id\", \"last_editor_id\", \"process_id\", \"date_created\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"offer_id\", \r\n  NEW.\"offer_subscription_status_id\", \r\n  NEW.\"display_name\", \r\n  NEW.\"description\", \r\n  NEW.\"requester_id\", \r\n  NEW.\"last_editor_id\", \r\n  NEW.\"process_id\", \r\n  NEW.\"date_created\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_OFFERSUBSCRIPTION$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_OFFERSUBSCRIPTION AFTER INSERT\r\nON \"portal\".\"offer_subscriptions\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_OFFERSUBSCRIPTION\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_OFFERSUBSCRIPTION", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_OFFERSUBSCRIPTION\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_OFFERSUBSCRIPTION$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_offer_subscription20231115\" (\"id\", \"company_id\", \"offer_id\", \"offer_subscription_status_id\", \"display_name\", \"description\", \"requester_id\", \"last_editor_id\", \"process_id\", \"date_created\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"company_id\", \r\n  NEW.\"offer_id\", \r\n  NEW.\"offer_subscription_status_id\", \r\n  NEW.\"display_name\", \r\n  NEW.\"description\", \r\n  NEW.\"requester_id\", \r\n  NEW.\"last_editor_id\", \r\n  NEW.\"process_id\", \r\n  NEW.\"date_created\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_OFFERSUBSCRIPTION$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_OFFERSUBSCRIPTION AFTER UPDATE\r\nON \"portal\".\"offer_subscriptions\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_OFFERSUBSCRIPTION\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscriptionProcessData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("OfferSubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_subscription_id");

                    b.Property<string>("OfferUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("offer_url");

                    b.HasKey("Id")
                        .HasName("pk_offer_subscriptions_process_datas");

                    b.HasIndex("OfferSubscriptionId")
                        .IsUnique()
                        .HasDatabaseName("ix_offer_subscriptions_process_datas_offer_subscription_id");

                    b.ToTable("offer_subscriptions_process_datas", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscriptionStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_offer_subscription_statuses");

                    b.ToTable("offer_subscription_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferTag", b =>
                {
                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag_name")
                        .HasAnnotation("Relational:JsonPropertyName", "tag_name");

                    b.HasKey("OfferId", "Name")
                        .HasName("pk_offer_tags");

                    b.ToTable("offer_tags", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_offer_types");

                    b.ToTable("offer_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "APP"
                        },
                        new
                        {
                            Id = 2,
                            Label = "CORE_COMPONENT"
                        },
                        new
                        {
                            Id = 3,
                            Label = "SERVICE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OnboardingServiceProviderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth_url");

                    b.Property<string>("CallbackUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("callback_url");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<byte[]>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("client_secret");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("EncryptionMode")
                        .HasColumnType("integer")
                        .HasColumnName("encryption_mode");

                    b.Property<byte[]>("InitializationVector")
                        .HasColumnType("bytea")
                        .HasColumnName("initialization_vector");

                    b.HasKey("Id")
                        .HasName("pk_onboarding_service_provider_details");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasDatabaseName("ix_onboarding_service_provider_details_company_id");

                    b.ToTable("onboarding_service_provider_details", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.PrivacyPolicy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_privacy_policies");

                    b.ToTable("privacy_policies", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "COMPANY_DATA"
                        },
                        new
                        {
                            Id = 2,
                            Label = "USER_DATA"
                        },
                        new
                        {
                            Id = 3,
                            Label = "LOCATION"
                        },
                        new
                        {
                            Id = 4,
                            Label = "BROWSER_HISTORY"
                        },
                        new
                        {
                            Id = 5,
                            Label = "NONE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("LockExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lock_expiry_date");

                    b.Property<int>("ProcessTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("process_type_id");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_processes");

                    b.HasIndex("ProcessTypeId")
                        .HasDatabaseName("ix_processes_process_type_id");

                    b.ToTable("processes", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<int>("ProcessStepStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("process_step_status_id");

                    b.Property<int>("ProcessStepTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("process_step_type_id");

                    b.HasKey("Id")
                        .HasName("pk_process_steps");

                    b.HasIndex("ProcessId")
                        .HasDatabaseName("ix_process_steps_process_id");

                    b.HasIndex("ProcessStepStatusId")
                        .HasDatabaseName("ix_process_steps_process_step_status_id");

                    b.HasIndex("ProcessStepTypeId")
                        .HasDatabaseName("ix_process_steps_process_step_type_id");

                    b.ToTable("process_steps", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStepStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_process_step_statuses");

                    b.ToTable("process_step_statuses", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "TODO"
                        },
                        new
                        {
                            Id = 2,
                            Label = "DONE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "SKIPPED"
                        },
                        new
                        {
                            Id = 4,
                            Label = "FAILED"
                        },
                        new
                        {
                            Id = 5,
                            Label = "DUPLICATE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStepType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_process_step_types");

                    b.ToTable("process_step_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "VERIFY_REGISTRATION"
                        },
                        new
                        {
                            Id = 2,
                            Label = "CREATE_BUSINESS_PARTNER_NUMBER_PUSH"
                        },
                        new
                        {
                            Id = 3,
                            Label = "CREATE_BUSINESS_PARTNER_NUMBER_PULL"
                        },
                        new
                        {
                            Id = 4,
                            Label = "CREATE_BUSINESS_PARTNER_NUMBER_MANUAL"
                        },
                        new
                        {
                            Id = 5,
                            Label = "CREATE_IDENTITY_WALLET"
                        },
                        new
                        {
                            Id = 6,
                            Label = "RETRIGGER_IDENTITY_WALLET"
                        },
                        new
                        {
                            Id = 7,
                            Label = "START_CLEARING_HOUSE"
                        },
                        new
                        {
                            Id = 8,
                            Label = "RETRIGGER_CLEARING_HOUSE"
                        },
                        new
                        {
                            Id = 9,
                            Label = "END_CLEARING_HOUSE"
                        },
                        new
                        {
                            Id = 10,
                            Label = "START_SELF_DESCRIPTION_LP"
                        },
                        new
                        {
                            Id = 11,
                            Label = "RETRIGGER_SELF_DESCRIPTION_LP"
                        },
                        new
                        {
                            Id = 12,
                            Label = "ACTIVATE_APPLICATION"
                        },
                        new
                        {
                            Id = 13,
                            Label = "RETRIGGER_BUSINESS_PARTNER_NUMBER_PUSH"
                        },
                        new
                        {
                            Id = 14,
                            Label = "RETRIGGER_BUSINESS_PARTNER_NUMBER_PULL"
                        },
                        new
                        {
                            Id = 15,
                            Label = "OVERRIDE_BUSINESS_PARTNER_NUMBER"
                        },
                        new
                        {
                            Id = 16,
                            Label = "TRIGGER_OVERRIDE_CLEARING_HOUSE"
                        },
                        new
                        {
                            Id = 17,
                            Label = "START_OVERRIDE_CLEARING_HOUSE"
                        },
                        new
                        {
                            Id = 18,
                            Label = "FINISH_SELF_DESCRIPTION_LP"
                        },
                        new
                        {
                            Id = 19,
                            Label = "DECLINE_APPLICATION"
                        },
                        new
                        {
                            Id = 20,
                            Label = "CREATE_DIM_WALLET"
                        },
                        new
                        {
                            Id = 21,
                            Label = "AWAIT_DIM_RESPONSE"
                        },
                        new
                        {
                            Id = 22,
                            Label = "RETRIGGER_CREATE_DIM_WALLET"
                        },
                        new
                        {
                            Id = 23,
                            Label = "VALIDATE_DID_DOCUMENT"
                        },
                        new
                        {
                            Id = 24,
                            Label = "RETRIGGER_VALIDATE_DID_DOCUMENT"
                        },
                        new
                        {
                            Id = 25,
                            Label = "REQUEST_BPN_CREDENTIAL"
                        },
                        new
                        {
                            Id = 26,
                            Label = "STORED_BPN_CREDENTIAL"
                        },
                        new
                        {
                            Id = 27,
                            Label = "REQUEST_MEMBERSHIP_CREDENTIAL"
                        },
                        new
                        {
                            Id = 28,
                            Label = "STORED_MEMBERSHIP_CREDENTIAL"
                        },
                        new
                        {
                            Id = 29,
                            Label = "TRANSMIT_BPN_DID"
                        },
                        new
                        {
                            Id = 30,
                            Label = "RETRIGGER_TRANSMIT_DID_BPN"
                        },
                        new
                        {
                            Id = 100,
                            Label = "TRIGGER_PROVIDER"
                        },
                        new
                        {
                            Id = 101,
                            Label = "START_AUTOSETUP"
                        },
                        new
                        {
                            Id = 102,
                            Label = "OFFERSUBSCRIPTION_CLIENT_CREATION"
                        },
                        new
                        {
                            Id = 103,
                            Label = "SINGLE_INSTANCE_SUBSCRIPTION_DETAILS_CREATION"
                        },
                        new
                        {
                            Id = 104,
                            Label = "OFFERSUBSCRIPTION_TECHNICALUSER_CREATION"
                        },
                        new
                        {
                            Id = 105,
                            Label = "ACTIVATE_SUBSCRIPTION"
                        },
                        new
                        {
                            Id = 106,
                            Label = "TRIGGER_PROVIDER_CALLBACK"
                        },
                        new
                        {
                            Id = 107,
                            Label = "RETRIGGER_PROVIDER"
                        },
                        new
                        {
                            Id = 108,
                            Label = "RETRIGGER_OFFERSUBSCRIPTION_CLIENT_CREATION"
                        },
                        new
                        {
                            Id = 109,
                            Label = "RETRIGGER_OFFERSUBSCRIPTION_TECHNICALUSER_CREATION"
                        },
                        new
                        {
                            Id = 110,
                            Label = "RETRIGGER_PROVIDER_CALLBACK"
                        },
                        new
                        {
                            Id = 111,
                            Label = "TRIGGER_ACTIVATE_SUBSCRIPTION"
                        },
                        new
                        {
                            Id = 112,
                            Label = "OFFERSUBSCRIPTION_CREATE_DIM_TECHNICAL_USER"
                        },
                        new
                        {
                            Id = 113,
                            Label = "RETRIGGER_OFFERSUBSCRIPTION_CREATE_DIM_TECHNICAL_USER"
                        },
                        new
                        {
                            Id = 114,
                            Label = "AWAIT_CREATE_DIM_TECHNICAL_USER_RESPONSE"
                        },
                        new
                        {
                            Id = 115,
                            Label = "RETRIGGER_AWAIT_CREATE_DIM_TECHNICAL_USER_RESPONSE"
                        },
                        new
                        {
                            Id = 200,
                            Label = "SYNCHRONIZE_USER"
                        },
                        new
                        {
                            Id = 201,
                            Label = "RETRIGGER_SYNCHRONIZE_USER"
                        },
                        new
                        {
                            Id = 202,
                            Label = "TRIGGER_CALLBACK_OSP_SUBMITTED"
                        },
                        new
                        {
                            Id = 203,
                            Label = "TRIGGER_CALLBACK_OSP_APPROVED"
                        },
                        new
                        {
                            Id = 204,
                            Label = "TRIGGER_CALLBACK_OSP_DECLINED"
                        },
                        new
                        {
                            Id = 205,
                            Label = "RETRIGGER_CALLBACK_OSP_SUBMITTED"
                        },
                        new
                        {
                            Id = 206,
                            Label = "RETRIGGER_CALLBACK_OSP_APPROVED"
                        },
                        new
                        {
                            Id = 207,
                            Label = "RETRIGGER_CALLBACK_OSP_DECLINED"
                        },
                        new
                        {
                            Id = 208,
                            Label = "MANUAL_DECLINE_OSP"
                        },
                        new
                        {
                            Id = 209,
                            Label = "REMOVE_KEYCLOAK_USERS"
                        },
                        new
                        {
                            Id = 210,
                            Label = "RETRIGGER_REMOVE_KEYCLOAK_USERS"
                        },
                        new
                        {
                            Id = 301,
                            Label = "SEND_MAIL"
                        },
                        new
                        {
                            Id = 302,
                            Label = "RETRIGGER_SEND_MAIL"
                        },
                        new
                        {
                            Id = 400,
                            Label = "INVITATION_CREATE_CENTRAL_IDP"
                        },
                        new
                        {
                            Id = 401,
                            Label = "INVITATION_CREATE_SHARED_IDP_SERVICE_ACCOUNT"
                        },
                        new
                        {
                            Id = 402,
                            Label = "INVITATION_ADD_REALM_ROLE"
                        },
                        new
                        {
                            Id = 403,
                            Label = "INVITATION_CREATE_SHARED_REALM"
                        },
                        new
                        {
                            Id = 404,
                            Label = "INVITATION_CREATE_CENTRAL_IDP_ORG_MAPPER"
                        },
                        new
                        {
                            Id = 405,
                            Label = "INVITATION_UPDATE_CENTRAL_IDP_URLS"
                        },
                        new
                        {
                            Id = 406,
                            Label = "INVITATION_CREATE_SHARED_CLIENT"
                        },
                        new
                        {
                            Id = 407,
                            Label = "INVITATION_ENABLE_CENTRAL_IDP"
                        },
                        new
                        {
                            Id = 408,
                            Label = "INVITATION_CREATE_DATABASE_IDP"
                        },
                        new
                        {
                            Id = 409,
                            Label = "INVITATION_CREATE_USER"
                        },
                        new
                        {
                            Id = 410,
                            Label = "RETRIGGER_INVITATION_CREATE_CENTRAL_IDP"
                        },
                        new
                        {
                            Id = 411,
                            Label = "RETRIGGER_INVITATION_CREATE_SHARED_IDP_SERVICE_ACCOUNT"
                        },
                        new
                        {
                            Id = 412,
                            Label = "RETRIGGER_INVITATION_ADD_REALM_ROLE"
                        },
                        new
                        {
                            Id = 413,
                            Label = "RETRIGGER_INVITATION_CREATE_SHARED_REALM"
                        },
                        new
                        {
                            Id = 414,
                            Label = "RETRIGGER_INVITATION_CREATE_CENTRAL_IDP_ORG_MAPPER"
                        },
                        new
                        {
                            Id = 415,
                            Label = "RETRIGGER_INVITATION_UPDATE_CENTRAL_IDP_URLS"
                        },
                        new
                        {
                            Id = 416,
                            Label = "RETRIGGER_INVITATION_CREATE_SHARED_CLIENT"
                        },
                        new
                        {
                            Id = 417,
                            Label = "RETRIGGER_INVITATION_ENABLE_CENTRAL_IDP"
                        },
                        new
                        {
                            Id = 418,
                            Label = "RETRIGGER_INVITATION_CREATE_USER"
                        },
                        new
                        {
                            Id = 419,
                            Label = "RETRIGGER_INVITATION_CREATE_DATABASE_IDP"
                        },
                        new
                        {
                            Id = 500,
                            Label = "CREATE_DIM_TECHNICAL_USER"
                        },
                        new
                        {
                            Id = 501,
                            Label = "RETRIGGER_CREATE_DIM_TECHNICAL_USER"
                        },
                        new
                        {
                            Id = 600,
                            Label = "DELETE_CENTRAL_USER"
                        },
                        new
                        {
                            Id = 601,
                            Label = "RETRIGGER_DELETE_CENTRAL_USER"
                        },
                        new
                        {
                            Id = 602,
                            Label = "DELETE_COMPANYUSER_ASSIGNED_PROCESS"
                        },
                        new
                        {
                            Id = 700,
                            Label = "DELETE_IDP_SHARED_REALM"
                        },
                        new
                        {
                            Id = 701,
                            Label = "RETRIGGER_DELETE_IDP_SHARED_REALM"
                        },
                        new
                        {
                            Id = 702,
                            Label = "DELETE_IDP_SHARED_SERVICEACCOUNT"
                        },
                        new
                        {
                            Id = 703,
                            Label = "RETRIGGER_DELETE_IDP_SHARED_SERVICEACCOUNT"
                        },
                        new
                        {
                            Id = 704,
                            Label = "DELETE_CENTRAL_IDENTITY_PROVIDER"
                        },
                        new
                        {
                            Id = 705,
                            Label = "RETRIGGER_DELETE_CENTRAL_IDENTITY_PROVIDER"
                        },
                        new
                        {
                            Id = 706,
                            Label = "DELETE_IDENTITY_PROVIDER"
                        },
                        new
                        {
                            Id = 800,
                            Label = "SELF_DESCRIPTION_CONNECTOR_CREATION"
                        },
                        new
                        {
                            Id = 801,
                            Label = "SELF_DESCRIPTION_COMPANY_CREATION"
                        },
                        new
                        {
                            Id = 802,
                            Label = "RETRIGGER_SELF_DESCRIPTION_CONNECTOR_CREATION"
                        },
                        new
                        {
                            Id = 803,
                            Label = "RETRIGGER_SELF_DESCRIPTION_COMPANY_CREATION"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_process_types");

                    b.ToTable("process_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "APPLICATION_CHECKLIST"
                        },
                        new
                        {
                            Id = 3,
                            Label = "OFFER_SUBSCRIPTION"
                        },
                        new
                        {
                            Id = 4,
                            Label = "PARTNER_REGISTRATION"
                        },
                        new
                        {
                            Id = 5,
                            Label = "MAILING"
                        },
                        new
                        {
                            Id = 6,
                            Label = "INVITATION"
                        },
                        new
                        {
                            Id = 7,
                            Label = "DIM_TECHNICAL_USER"
                        },
                        new
                        {
                            Id = 8,
                            Label = "USER_PROVISIONING"
                        },
                        new
                        {
                            Id = 9,
                            Label = "IDENTITYPROVIDER_PROVISIONING"
                        },
                        new
                        {
                            Id = 10,
                            Label = "SELF_DESCRIPTION_CREATION"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProviderCompanyDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AutoSetupCallbackUrl")
                        .HasColumnType("text")
                        .HasColumnName("auto_setup_callback_url");

                    b.Property<string>("AutoSetupUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auto_setup_url");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.HasKey("Id")
                        .HasName("pk_provider_company_details");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasDatabaseName("ix_provider_company_details_company_id");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_provider_company_details_last_editor_id");

                    b.ToTable("provider_company_details", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_PROVIDERCOMPANYDETAIL");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_PROVIDERCOMPANYDETAIL");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_PROVIDERCOMPANYDETAIL", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_PROVIDERCOMPANYDETAIL\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_PROVIDERCOMPANYDETAIL$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_provider_company_detail20231115\" (\"id\", \"date_created\", \"auto_setup_url\", \"auto_setup_callback_url\", \"company_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"auto_setup_url\", \r\n  NEW.\"auto_setup_callback_url\", \r\n  NEW.\"company_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_PROVIDERCOMPANYDETAIL$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_PROVIDERCOMPANYDETAIL AFTER INSERT\r\nON \"portal\".\"provider_company_details\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_PROVIDERCOMPANYDETAIL\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_PROVIDERCOMPANYDETAIL", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_PROVIDERCOMPANYDETAIL\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_PROVIDERCOMPANYDETAIL$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_provider_company_detail20231115\" (\"id\", \"date_created\", \"auto_setup_url\", \"auto_setup_callback_url\", \"company_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"auto_setup_url\", \r\n  NEW.\"auto_setup_callback_url\", \r\n  NEW.\"company_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_PROVIDERCOMPANYDETAIL$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_PROVIDERCOMPANYDETAIL AFTER UPDATE\r\nON \"portal\".\"provider_company_details\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_PROVIDERCOMPANYDETAIL\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ServiceDetail", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("service_type_id");

                    b.HasKey("ServiceId", "ServiceTypeId")
                        .HasName("pk_service_details");

                    b.HasIndex("ServiceTypeId")
                        .HasDatabaseName("ix_service_details_service_type_id");

                    b.ToTable("service_details", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_service_types");

                    b.ToTable("service_types", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "DATASPACE_SERVICE"
                        },
                        new
                        {
                            Id = 2,
                            Label = "CONSULTANCY_SERVICE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.TechnicalUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.HasKey("Id")
                        .HasName("pk_technical_user_profiles");

                    b.HasIndex("OfferId")
                        .HasDatabaseName("ix_technical_user_profiles_offer_id");

                    b.ToTable("technical_user_profiles", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.TechnicalUserProfileAssignedUserRole", b =>
                {
                    b.Property<Guid>("TechnicalUserProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_user_profile_id");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.HasKey("TechnicalUserProfileId", "UserRoleId")
                        .HasName("pk_technical_user_profile_assigned_user_roles");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_technical_user_profile_assigned_user_roles_user_role_id");

                    b.ToTable("technical_user_profile_assigned_user_roles", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UniqueIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_unique_identifiers");

                    b.ToTable("unique_identifiers", "portal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "COMMERCIAL_REG_NUMBER"
                        },
                        new
                        {
                            Id = 2,
                            Label = "VAT_ID"
                        },
                        new
                        {
                            Id = 3,
                            Label = "LEI_CODE"
                        },
                        new
                        {
                            Id = 4,
                            Label = "VIES"
                        },
                        new
                        {
                            Id = 5,
                            Label = "EORI"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Shortname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shortname");

                    b.HasKey("Id")
                        .HasName("pk_use_cases");

                    b.ToTable("use_cases", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCaseDescription", b =>
                {
                    b.Property<Guid>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("UseCaseId", "LanguageShortName")
                        .HasName("pk_use_case_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_use_case_descriptions_language_short_name");

                    b.ToTable("use_case_descriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid")
                        .HasColumnName("offer_id");

                    b.Property<string>("UserRoleText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_role")
                        .HasAnnotation("Relational:JsonPropertyName", "user_role");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("LastEditorId")
                        .HasDatabaseName("ix_user_roles_last_editor_id");

                    b.HasIndex("OfferId")
                        .HasDatabaseName("ix_user_roles_offer_id");

                    b.ToTable("user_roles", "portal", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_USERROLE");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_USERROLE");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_USERROLE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_INSERT_USERROLE\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_USERROLE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_user_role20231115\" (\"id\", \"user_role\", \"offer_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"user_role\", \r\n  NEW.\"offer_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_USERROLE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_USERROLE AFTER INSERT\r\nON \"portal\".\"user_roles\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_INSERT_USERROLE\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_USERROLE", "CREATE FUNCTION \"portal\".\"LC_TRIGGER_AFTER_UPDATE_USERROLE\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_USERROLE$\r\nBEGIN\r\n  INSERT INTO \"portal\".\"audit_user_role20231115\" (\"id\", \"user_role\", \"offer_id\", \"last_editor_id\", \"audit_v1id\", \"audit_v1operation_id\", \"audit_v1date_last_changed\", \"audit_v1last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"user_role\", \r\n  NEW.\"offer_id\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_USERROLE$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_USERROLE AFTER UPDATE\r\nON \"portal\".\"user_roles\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"portal\".\"LC_TRIGGER_AFTER_UPDATE_USERROLE\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleAssignedCollection", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.Property<Guid>("UserRoleCollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_collection_id");

                    b.HasKey("UserRoleId", "UserRoleCollectionId")
                        .HasName("pk_user_role_assigned_collections");

                    b.HasIndex("UserRoleCollectionId")
                        .HasDatabaseName("ix_user_role_assigned_collections_user_role_collection_id");

                    b.ToTable("user_role_assigned_collections", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_role_collections");

                    b.ToTable("user_role_collections", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleCollectionDescription", b =>
                {
                    b.Property<Guid>("UserRoleCollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_collection_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasKey("UserRoleCollectionId", "LanguageShortName")
                        .HasName("pk_user_role_collection_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_user_role_collection_descriptions_language_short_name");

                    b.ToTable("user_role_collection_descriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleDescription", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasKey("UserRoleId", "LanguageShortName")
                        .HasName("pk_user_role_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_user_role_descriptions_language_short_name");

                    b.ToTable("user_role_descriptions", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.AgreementView", b =>
                {
                    b.Property<string>("AgreementCompanyRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("agreement_company_role");

                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<string>("AgreementName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("agreement_name");

                    b.Property<string>("AgreementStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("agreement_status");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("boolean")
                        .HasColumnName("mandatory");

                    b.ToTable((string)null);

                    b.ToView("agreement_view", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.CompaniesLinkedServiceAccount", b =>
                {
                    b.Property<Guid>("ServiceAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_account_id");

                    b.Property<Guid>("Owners")
                        .HasColumnType("uuid")
                        .HasColumnName("owners");

                    b.Property<Guid?>("Provider")
                        .HasColumnType("uuid")
                        .HasColumnName("provider");

                    b.HasKey("ServiceAccountId");

                    b.ToTable((string)null);

                    b.ToView("company_linked_service_accounts", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.CompanyConnectorView", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("ConnectorStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connector_status");

                    b.Property<string>("ConnectorUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connector_url");

                    b.ToTable((string)null);

                    b.ToView("company_connector_view", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.CompanyIdpView", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("IdpAlias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("idp_alias");

                    b.ToTable((string)null);

                    b.ToView("company_idp_view", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.CompanyRoleCollectionRolesView", b =>
                {
                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("collection_name");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_role");

                    b.ToTable((string)null);

                    b.ToView("companyrole_collectionroles_view", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.CompanyUsersView", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasColumnName("user_email");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_status");

                    b.ToTable((string)null);

                    b.ToView("company_users_view", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.OfferSubscriptionView", b =>
                {
                    b.Property<Guid?>("AppInstance")
                        .HasColumnType("uuid")
                        .HasColumnName("app_instance");

                    b.Property<Guid?>("Connector")
                        .HasColumnType("uuid")
                        .HasColumnName("connector");

                    b.Property<int>("OfferTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("offer_type_id");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid?>("TechnicalUser")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_user");

                    b.ToTable((string)null);

                    b.ToView("offer_subscription_view", "portal");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificate", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateStatus", "CompanyCertificateStatus")
                        .WithMany("CompanyCertificates")
                        .HasForeignKey("CompanyCertificateStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_certificates_company_certificate_statuses_company_c");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateType", "CompanyCertificateType")
                        .WithMany("CompanyCertificates")
                        .HasForeignKey("CompanyCertificateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_certificates_company_certificate_types_company_cert");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyCertificates")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company_certificates_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", "Document")
                        .WithMany("CompanyCertificates")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("fk_company_certificates_documents_document_id");

                    b.Navigation("Company");

                    b.Navigation("CompanyCertificateStatus");

                    b.Navigation("CompanyCertificateType");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeAssignedStatus", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateType", "CompanyCertificateType")
                        .WithOne("CompanyCertificateTypeAssignedStatus")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeAssignedStatus", "CompanyCertificateTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_company_certificate_type_assigned_statuses_company_certific");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeStatus", "CompanyCertificateTypeStatus")
                        .WithMany("CompanyCertificateTypeAssignedStatuses")
                        .HasForeignKey("CompanyCertificateTypeStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_company_certificate_type_assigned_statuses_company_certific1");

                    b.Navigation("CompanyCertificateType");

                    b.Navigation("CompanyCertificateTypeStatus");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeDescription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateType", "CompanyCertificateType")
                        .WithMany("CompanyCertificateTypeDescriptions")
                        .HasForeignKey("CompanyCertificateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_certificate_type_descriptions_company_certificate_t");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("CompanyCertificateTypeDescriptions")
                        .HasForeignKey("LanguageShortName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_certificate_type_descriptions_languages_language_sh");

                    b.Navigation("CompanyCertificateType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Address", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryAlpha2Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_countries_country_alpha2code");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Agreement", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementCategory", "AgreementCategory")
                        .WithMany("Agreements")
                        .HasForeignKey("AgreementCategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_agreements_agreement_categories_agreement_category_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementStatus", null)
                        .WithMany("Agreements")
                        .HasForeignKey("AgreementStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agreements_agreement_statuses_agreement_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", "Document")
                        .WithMany("Agreements")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("fk_agreements_documents_document_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "IssuerCompany")
                        .WithMany("Agreements")
                        .HasForeignKey("IssuerCompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_agreements_companies_issuer_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCase", "UseCase")
                        .WithMany("Agreements")
                        .HasForeignKey("UseCaseId")
                        .HasConstraintName("fk_agreements_use_cases_use_case_id");

                    b.Navigation("AgreementCategory");

                    b.Navigation("Document");

                    b.Navigation("IssuerCompany");

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementAssignedCompanyRole", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Agreement", "Agreement")
                        .WithMany("AgreementAssignedCompanyRoles")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("fk_agreement_assigned_company_roles_agreements_agreement_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithMany("AgreementAssignedCompanyRoles")
                        .HasForeignKey("CompanyRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_agreement_assigned_company_roles_company_roles_company_role");

                    b.Navigation("Agreement");

                    b.Navigation("CompanyRole");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementAssignedOffer", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Agreement", "Agreement")
                        .WithMany("AgreementAssignedOffers")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("fk_agreement_assigned_offers_agreements_agreement_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("AgreementAssignedOffers")
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_agreement_assigned_offers_offers_offer_id");

                    b.Navigation("Agreement");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementAssignedOfferType", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Agreement", "Agreement")
                        .WithMany("AgreementAssignedOfferTypes")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("fk_agreement_assigned_offer_types_agreements_agreement_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferType", "OfferType")
                        .WithMany("AgreementAssignedOfferTypes")
                        .HasForeignKey("OfferTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_agreement_assigned_offer_types_offer_types_offer_type_id");

                    b.Navigation("Agreement");

                    b.Navigation("OfferType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppAssignedUseCase", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_app_assigned_use_cases_offers_app_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCase", "UseCase")
                        .WithMany()
                        .HasForeignKey("UseCaseId")
                        .IsRequired()
                        .HasConstraintName("fk_app_assigned_use_cases_use_cases_use_case_id");

                    b.Navigation("App");

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstance", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "App")
                        .WithMany("AppInstances")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_app_instances_offers_app_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IamClient", "IamClient")
                        .WithMany("AppInstances")
                        .HasForeignKey("IamClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_app_instances_iam_clients_iam_client_id");

                    b.Navigation("App");

                    b.Navigation("IamClient");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstanceAssignedCompanyServiceAccount", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstance", "AppInstance")
                        .WithMany("ServiceAccounts")
                        .HasForeignKey("AppInstanceId")
                        .IsRequired()
                        .HasConstraintName("fk_app_instance_assigned_service_accounts_app_instances_app_in");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", "CompanyServiceAccount")
                        .WithMany("AppInstances")
                        .HasForeignKey("CompanyServiceAccountId")
                        .IsRequired()
                        .HasConstraintName("fk_app_instance_assigned_service_accounts_company_service_acco");

                    b.Navigation("AppInstance");

                    b.Navigation("CompanyServiceAccount");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstanceSetup", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "App")
                        .WithOne("AppInstanceSetup")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstanceSetup", "AppId")
                        .IsRequired()
                        .HasConstraintName("fk_app_instance_setups_offers_app_id");

                    b.Navigation("App");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppLanguage", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_app_languages_offers_app_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageShortName")
                        .IsRequired()
                        .HasConstraintName("fk_app_languages_languages_language_short_name");

                    b.Navigation("App");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppSubscriptionDetail", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstance", "AppInstance")
                        .WithMany("AppSubscriptionDetails")
                        .HasForeignKey("AppInstanceId")
                        .HasConstraintName("fk_app_subscription_details_app_instances_app_instance_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_app_subscription_details_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", "OfferSubscription")
                        .WithOne("AppSubscriptionDetail")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppSubscriptionDetail", "OfferSubscriptionId")
                        .IsRequired()
                        .HasConstraintName("fk_app_subscription_details_offer_subscriptions_offer_subscrip");

                    b.Navigation("AppInstance");

                    b.Navigation("LastEditor");

                    b.Navigation("OfferSubscription");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntry", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntryStatus", "ApplicationChecklistEntryStatus")
                        .WithMany("ApplicationChecklistEntries")
                        .HasForeignKey("ApplicationChecklistEntryStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_checklist_application_checklist_statuses_applic");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntryType", "ApplicationChecklistEntryType")
                        .WithMany("ApplicationChecklistEntries")
                        .HasForeignKey("ApplicationChecklistEntryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_checklist_application_checklist_types_applicati");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", "Application")
                        .WithMany("ApplicationChecklistEntries")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("fk_application_checklist_company_applications_application_id");

                    b.Navigation("Application");

                    b.Navigation("ApplicationChecklistEntryStatus");

                    b.Navigation("ApplicationChecklistEntryType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Address", "Address")
                        .WithMany("Companies")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_companies_addresses_address_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyStatus", "CompanyStatus")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companies_company_statuses_company_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", "SelfDescriptionDocument")
                        .WithMany("Companies")
                        .HasForeignKey("SelfDescriptionDocumentId")
                        .HasConstraintName("fk_companies_documents_self_description_document_id");

                    b.Navigation("Address");

                    b.Navigation("CompanyStatus");

                    b.Navigation("SelfDescriptionDocument");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplicationStatus", "ApplicationStatus")
                        .WithMany("CompanyApplications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_applications_company_application_statuses_applicati");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "ChecklistProcess")
                        .WithOne("CompanyApplication")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", "ChecklistProcessId")
                        .HasConstraintName("fk_company_applications_processes_checklist_process_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplicationType", "CompanyApplicationType")
                        .WithMany("CompanyApplications")
                        .HasForeignKey("CompanyApplicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_applications_company_application_types_company_appl");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyApplications")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company_applications_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_company_applications_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "OnboardingServiceProvider")
                        .WithMany("ProvidedApplications")
                        .HasForeignKey("OnboardingServiceProviderId")
                        .HasConstraintName("fk_company_applications_companies_onboarding_service_provider_");

                    b.Navigation("ApplicationStatus");

                    b.Navigation("ChecklistProcess");

                    b.Navigation("Company");

                    b.Navigation("CompanyApplicationType");

                    b.Navigation("LastEditor");

                    b.Navigation("OnboardingServiceProvider");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyAssignedRole", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyAssignedRoles")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company_assigned_roles_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithMany("CompanyAssignedRoles")
                        .HasForeignKey("CompanyRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_company_assigned_roles_company_roles_company_role_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_company_assigned_roles_identities_last_editor_id");

                    b.Navigation("Company");

                    b.Navigation("CompanyRole");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyAssignedUseCase", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyAssignedUseCase")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company_assigned_use_cases_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCase", "UseCase")
                        .WithMany("CompanyAssignedUseCase")
                        .HasForeignKey("UseCaseId")
                        .IsRequired()
                        .HasConstraintName("fk_company_assigned_use_cases_use_cases_use_case_id");

                    b.Navigation("Company");

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyIdentifier", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyIdentifiers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company_identifiers_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UniqueIdentifier", "UniqueIdentifier")
                        .WithMany("CompanyIdentifiers")
                        .HasForeignKey("UniqueIdentifierId")
                        .IsRequired()
                        .HasConstraintName("fk_company_identifiers_unique_identifiers_unique_identifier_id");

                    b.Navigation("Company");

                    b.Navigation("UniqueIdentifier");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyIdentityProvider", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_identity_providers_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProvider", "IdentityProvider")
                        .WithMany("CompanyIdentityProviders")
                        .HasForeignKey("IdentityProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_identity_providers_identity_providers_identity_prov");

                    b.Navigation("Company");

                    b.Navigation("IdentityProvider");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyInvitation", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", "Application")
                        .WithOne("CompanyInvitation")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyInvitation", "ApplicationId")
                        .HasConstraintName("fk_company_invitations_company_applications_application_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithOne("CompanyInvitation")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyInvitation", "ProcessId")
                        .IsRequired()
                        .HasConstraintName("fk_company_invitations_processes_process_id");

                    b.Navigation("Application");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleAssignedRoleCollection", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithOne("CompanyRoleAssignedRoleCollection")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleAssignedRoleCollection", "CompanyRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_role_assigned_role_collections_company_roles_compan");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleCollection", "UserRoleCollection")
                        .WithOne("CompanyRoleAssignedRoleCollection")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleAssignedRoleCollection", "UserRoleCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_role_assigned_role_collections_user_role_collection");

                    b.Navigation("CompanyRole");

                    b.Navigation("UserRoleCollection");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleDescription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithMany("CompanyRoleDescriptions")
                        .HasForeignKey("CompanyRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_role_descriptions_company_roles_company_role_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("CompanyRoleDescriptions")
                        .HasForeignKey("LanguageShortName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_role_descriptions_languages_language_short_name");

                    b.Navigation("CompanyRole");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleRegistrationData", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithOne("CompanyRoleRegistrationData")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRoleRegistrationData", "CompanyRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_role_registration_data_company_roles_company_role_id");

                    b.Navigation("CompanyRole");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccountKind", "CompanyServiceAccountKind")
                        .WithMany("CompanyServiceAccounts")
                        .HasForeignKey("CompanyServiceAccountKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_service_accounts_company_service_account_kindes_com");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccountType", "CompanyServiceAccountType")
                        .WithMany("CompanyServiceAccounts")
                        .HasForeignKey("CompanyServiceAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_service_accounts_company_service_account_types_comp");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "Identity")
                        .WithOne("CompanyServiceAccount")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_service_accounts_identities_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", "OfferSubscription")
                        .WithMany("CompanyServiceAccounts")
                        .HasForeignKey("OfferSubscriptionId")
                        .HasConstraintName("fk_company_service_accounts_offer_subscriptions_offer_subscrip");

                    b.Navigation("CompanyServiceAccountKind");

                    b.Navigation("CompanyServiceAccountType");

                    b.Navigation("Identity");

                    b.Navigation("OfferSubscription");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "Identity")
                        .WithOne("CompanyUser")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_users_identities_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_company_users_identities_last_editor_id");

                    b.Navigation("Identity");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedAppFavourite", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_company_user_assigned_app_favourites_offers_app_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_company_user_assigned_app_favourites_company_users_company_");

                    b.Navigation("App");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedBusinessPartner", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("CompanyUserAssignedBusinessPartners")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_assigned_business_partners_company_users_compa");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedIdentityProvider", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("CompanyUserAssignedIdentityProviders")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_assigned_identity_providers_company_users_comp");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProvider", "IdentityProvider")
                        .WithMany("CompanyUserAssignedIdentityProviders")
                        .HasForeignKey("IdentityProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_assigned_identity_providers_identity_providers");

                    b.Navigation("CompanyUser");

                    b.Navigation("IdentityProvider");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedProcess", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithOne("CompanyUserAssignedProcess")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedProcess", "CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_assigned_processes_company_users_company_user_");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithOne("CompanyUserAssignedProcess")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUserAssignedProcess", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_assigned_processes_processes_process_id");

                    b.Navigation("CompanyUser");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyWalletData", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithOne("CompanyWalletData")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyWalletData", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_wallet_datas_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Connector", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", "CompanyServiceAccount")
                        .WithOne("Connector")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Connector", "CompanyServiceAccountId")
                        .HasConstraintName("fk_connectors_company_service_accounts_company_service_account");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Host")
                        .WithMany("HostedConnectors")
                        .HasForeignKey("HostId")
                        .HasConstraintName("fk_connectors_companies_host_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_connectors_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Country", "Location")
                        .WithMany("Connectors")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_connectors_countries_location_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Provider")
                        .WithMany("ProvidedConnectors")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_connectors_companies_provider_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", "SelfDescriptionDocument")
                        .WithOne("Connector")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Connector", "SelfDescriptionDocumentId")
                        .HasConstraintName("fk_connectors_documents_self_description_document_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorStatus", "Status")
                        .WithMany("Connectors")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("fk_connectors_connector_statuses_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorType", "Type")
                        .WithMany("Connectors")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("fk_connectors_connector_types_type_id");

                    b.Navigation("CompanyServiceAccount");

                    b.Navigation("Host");

                    b.Navigation("LastEditor");

                    b.Navigation("Location");

                    b.Navigation("Provider");

                    b.Navigation("SelfDescriptionDocument");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorAssignedOfferSubscription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Connector", "Connector")
                        .WithMany("ConnectorAssignedOfferSubscriptions")
                        .HasForeignKey("ConnectorId")
                        .IsRequired()
                        .HasConstraintName("fk_connector_assigned_offer_subscriptions_connectors_connector");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", "OfferSubscription")
                        .WithMany("ConnectorAssignedOfferSubscriptions")
                        .HasForeignKey("OfferSubscriptionId")
                        .IsRequired()
                        .HasConstraintName("fk_connector_assigned_offer_subscriptions_offer_subscriptions_");

                    b.Navigation("Connector");

                    b.Navigation("OfferSubscription");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Consent", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Agreement", "Agreement")
                        .WithMany("Consents")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("fk_consents_agreements_agreement_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("Consents")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_consents_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("Consents")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_consents_company_users_company_user_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConsentStatus", "ConsentStatus")
                        .WithMany("Consents")
                        .HasForeignKey("ConsentStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_consents_consent_statuses_consent_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", "Document")
                        .WithMany("Consents")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("fk_consents_documents_document_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_consents_identities_last_editor_id");

                    b.Navigation("Agreement");

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");

                    b.Navigation("ConsentStatus");

                    b.Navigation("Document");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConsentAssignedOffer", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Consent", "Consent")
                        .WithMany("ConsentAssignedOffers")
                        .HasForeignKey("ConsentId")
                        .IsRequired()
                        .HasConstraintName("fk_consent_assigned_offers_consents_consent_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("ConsentAssignedOffers")
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_consent_assigned_offers_offers_offer_id");

                    b.Navigation("Consent");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConsentAssignedOfferSubscription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Consent", "Consent")
                        .WithMany("ConsentAssignedOfferSubscriptions")
                        .HasForeignKey("ConsentId")
                        .IsRequired()
                        .HasConstraintName("fk_consent_assigned_offer_subscriptions_consents_consent_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", "OfferSubscription")
                        .WithMany("ConsentAssignedOfferSubscriptions")
                        .HasForeignKey("OfferSubscriptionId")
                        .IsRequired()
                        .HasConstraintName("fk_consent_assigned_offer_subscriptions_offer_subscriptions_of");

                    b.Navigation("Consent");

                    b.Navigation("OfferSubscription");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CountryAssignedIdentifier", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.BpdmIdentifier", "BpdmIdentifier")
                        .WithMany("CountryAssignedIdentifiers")
                        .HasForeignKey("BpdmIdentifierId")
                        .HasConstraintName("fk_country_assigned_identifiers_bpdm_identifiers_bpdm_identifi");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Country", "Country")
                        .WithMany("CountryAssignedIdentifiers")
                        .HasForeignKey("CountryAlpha2Code")
                        .IsRequired()
                        .HasConstraintName("fk_country_assigned_identifiers_countries_country_alpha2code");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UniqueIdentifier", "UniqueIdentifier")
                        .WithMany("CountryAssignedIdentifiers")
                        .HasForeignKey("UniqueIdentifierId")
                        .IsRequired()
                        .HasConstraintName("fk_country_assigned_identifiers_unique_identifiers_unique_iden");

                    b.Navigation("BpdmIdentifier");

                    b.Navigation("Country");

                    b.Navigation("UniqueIdentifier");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CountryLongName", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Country", "Country")
                        .WithMany("CountryLongNames")
                        .HasForeignKey("Alpha2Code")
                        .IsRequired()
                        .HasConstraintName("fk_country_long_names_countries_alpha2code");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("CountryLongNames")
                        .HasForeignKey("ShortName")
                        .IsRequired()
                        .HasConstraintName("fk_country_long_names_languages_short_name");

                    b.Navigation("Country");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DimCompanyServiceAccount", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", "CompanyServiceAccount")
                        .WithOne("DimCompanyServiceAccount")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DimCompanyServiceAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dim_company_service_accounts_company_service_accounts_id");

                    b.Navigation("CompanyServiceAccount");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DimUserCreationData", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithOne("DimUserCreationData")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DimUserCreationData", "ProcessId")
                        .IsRequired()
                        .HasConstraintName("fk_dim_user_creation_data_processes_process_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", "ServiceAccount")
                        .WithOne("DimUserCreationData")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DimUserCreationData", "ServiceAccountId")
                        .IsRequired()
                        .HasConstraintName("fk_dim_user_creation_data_company_service_accounts_service_acc");

                    b.Navigation("Process");

                    b.Navigation("ServiceAccount");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("Documents")
                        .HasForeignKey("CompanyUserId")
                        .HasConstraintName("fk_documents_company_users_company_user_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DocumentStatus", "DocumentStatus")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_document_status_document_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_document_types_document_type_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MediaType", "MediaType")
                        .WithMany("Documents")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_media_types_media_type_id");

                    b.Navigation("CompanyUser");

                    b.Navigation("DocumentStatus");

                    b.Navigation("DocumentType");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IamIdentityProvider", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProvider", "IdentityProvider")
                        .WithOne("IamIdentityProvider")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IamIdentityProvider", "IdentityProviderId")
                        .IsRequired()
                        .HasConstraintName("fk_iam_identity_providers_identity_providers_identity_provider");

                    b.Navigation("IdentityProvider");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("Identities")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_identities_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityType", "IdentityType")
                        .WithMany("Identities")
                        .HasForeignKey("IdentityTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_identities_identity_type_identity_type_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_identities_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityUserStatus", "IdentityStatus")
                        .WithMany("Identities")
                        .HasForeignKey("UserStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_identities_identity_user_statuses_user_status_id");

                    b.Navigation("Company");

                    b.Navigation("IdentityStatus");

                    b.Navigation("IdentityType");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityAssignedRole", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "Identity")
                        .WithMany("IdentityAssignedRoles")
                        .HasForeignKey("IdentityId")
                        .IsRequired()
                        .HasConstraintName("fk_identity_assigned_roles_identities_identity_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_identity_assigned_roles_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRole", "UserRole")
                        .WithMany("IdentityAssignedRoles")
                        .HasForeignKey("UserRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_identity_assigned_roles_user_roles_user_role_id");

                    b.Navigation("Identity");

                    b.Navigation("LastEditor");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProvider", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderCategory", "IdentityProviderCategory")
                        .WithMany("IdentityProviders")
                        .HasForeignKey("IdentityProviderCategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_identity_providers_identity_provider_categories_identity_pr");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderType", "IdentityProviderType")
                        .WithMany("IdentityProviders")
                        .HasForeignKey("IdentityProviderTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_identity_providers_identity_provider_types_identity_provide");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Owner")
                        .WithMany("OwnedIdentityProviders")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("fk_identity_providers_companies_owner_id");

                    b.Navigation("IdentityProviderCategory");

                    b.Navigation("IdentityProviderType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderAssignedProcess", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProvider", "IdentityProvider")
                        .WithOne("IdentityProviderAssignedProcess")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderAssignedProcess", "IdentityProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_provider_assigned_processes_identity_providers_ide");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithOne("IdentityProviderAssignedProcess")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderAssignedProcess", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_provider_assigned_processes_processes_process_id");

                    b.Navigation("IdentityProvider");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Invitation", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", "CompanyApplication")
                        .WithMany("Invitations")
                        .HasForeignKey("CompanyApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitations_company_applications_company_application_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("Invitations")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_invitations_company_users_company_user_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.InvitationStatus", "InvitationStatus")
                        .WithMany("Invitations")
                        .HasForeignKey("InvitationStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_invitations_invitation_statuses_invitation_status_id");

                    b.Navigation("CompanyApplication");

                    b.Navigation("CompanyUser");

                    b.Navigation("InvitationStatus");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.LanguageLongName", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "LongNameLanguage")
                        .WithMany("LanguageLongNameLanguages")
                        .HasForeignKey("LanguageShortName")
                        .IsRequired()
                        .HasConstraintName("fk_language_long_names_languages_language_short_name");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("LanguageLongNames")
                        .HasForeignKey("ShortName")
                        .IsRequired()
                        .HasConstraintName("fk_language_long_names_languages_short_name");

                    b.Navigation("Language");

                    b.Navigation("LongNameLanguage");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MailingInformation", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MailingStatus", "MailingStatus")
                        .WithMany("MailingInformations")
                        .HasForeignKey("MailingStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_mailing_informations_mailing_statuses_mailing_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithOne("MailingInformation")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MailingInformation", "ProcessId")
                        .IsRequired()
                        .HasConstraintName("fk_mailing_informations_processes_process_id");

                    b.Navigation("MailingStatus");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NetworkRegistration", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", "CompanyApplication")
                        .WithOne("NetworkRegistration")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NetworkRegistration", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_registrations_company_applications_application_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithOne("NetworkRegistration")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NetworkRegistration", "CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_network_registrations_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "OnboardingServiceProvider")
                        .WithMany("OnboardedNetworkRegistrations")
                        .HasForeignKey("OnboardingServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_registrations_companies_onboarding_service_provider");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithOne("NetworkRegistration")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NetworkRegistration", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_registrations_processes_process_id");

                    b.Navigation("Company");

                    b.Navigation("CompanyApplication");

                    b.Navigation("OnboardingServiceProvider");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Notification", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "Creator")
                        .WithMany("CreatedNotifications")
                        .HasForeignKey("CreatorUserId")
                        .HasConstraintName("fk_notifications_identities_creator_user_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_notifications_notification_type_notification_type_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverUserId")
                        .IsRequired()
                        .HasConstraintName("fk_notifications_company_users_receiver_user_id");

                    b.Navigation("Creator");

                    b.Navigation("NotificationType");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationTypeAssignedTopic", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationTopic", "NotificationTopic")
                        .WithMany("NotificationTypeAssignedTopics")
                        .HasForeignKey("NotificationTopicId")
                        .IsRequired()
                        .HasConstraintName("fk_notification_type_assigned_topics_notification_topic_notifi");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationType", "NotificationType")
                        .WithOne("NotificationTypeAssignedTopic")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationTypeAssignedTopic", "NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_notification_type_assigned_topics_notification_type_notific");

                    b.Navigation("NotificationTopic");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_offers_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.LicenseType", "LicenseType")
                        .WithMany("Offers")
                        .HasForeignKey("LicenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_offers_license_types_license_type_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferStatus", "OfferStatus")
                        .WithMany("Offers")
                        .HasForeignKey("OfferStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_offers_offer_statuses_offer_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferType", "OfferType")
                        .WithMany("Offers")
                        .HasForeignKey("OfferTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_offers_offer_types_offer_type_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "ProviderCompany")
                        .WithMany("ProvidedOffers")
                        .HasForeignKey("ProviderCompanyId")
                        .HasConstraintName("fk_offers_companies_provider_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "SalesManager")
                        .WithMany("SalesManagerOfOffers")
                        .HasForeignKey("SalesManagerId")
                        .HasConstraintName("fk_offers_company_users_sales_manager_id");

                    b.Navigation("LastEditor");

                    b.Navigation("LicenseType");

                    b.Navigation("OfferStatus");

                    b.Navigation("OfferType");

                    b.Navigation("ProviderCompany");

                    b.Navigation("SalesManager");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferAssignedDocument", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_assigned_documents_documents_document_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_assigned_documents_offers_offer_id");

                    b.Navigation("Document");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferAssignedLicense", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_assigned_licenses_offers_offer_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferLicense", "OfferLicense")
                        .WithMany()
                        .HasForeignKey("OfferLicenseId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_assigned_licenses_offer_licenses_offer_license_id");

                    b.Navigation("Offer");

                    b.Navigation("OfferLicense");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferAssignedPrivacyPolicy", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("OfferAssignedPrivacyPolicies")
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_assigned_privacy_policies_offers_offer_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.PrivacyPolicy", "PrivacyPolicy")
                        .WithMany("OfferAssignedPrivacyPolicies")
                        .HasForeignKey("PrivacyPolicyId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_assigned_privacy_policies_privacy_policies_privacy_po");

                    b.Navigation("Offer");

                    b.Navigation("PrivacyPolicy");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferDescription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("AppDescriptions")
                        .HasForeignKey("LanguageShortName")
                        .IsRequired()
                        .HasConstraintName("fk_offer_descriptions_languages_language_short_name");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("OfferDescriptions")
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_descriptions_offers_offer_id");

                    b.Navigation("Language");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("OfferSubscriptions")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_subscriptions_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_offer_subscriptions_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("OfferSubscriptions")
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_subscriptions_offers_offer_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscriptionStatus", "OfferSubscriptionStatus")
                        .WithMany("OfferSubscriptions")
                        .HasForeignKey("OfferSubscriptionStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_subscriptions_offer_subscription_statuses_offer_subsc");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithOne("OfferSubscription")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", "ProcessId")
                        .HasConstraintName("fk_offer_subscriptions_processes_process_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", "Requester")
                        .WithMany("RequestedSubscriptions")
                        .HasForeignKey("RequesterId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_subscriptions_company_users_requester_id");

                    b.Navigation("Company");

                    b.Navigation("LastEditor");

                    b.Navigation("Offer");

                    b.Navigation("OfferSubscriptionStatus");

                    b.Navigation("Process");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscriptionProcessData", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", "OfferSubscription")
                        .WithOne("OfferSubscriptionProcessData")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscriptionProcessData", "OfferSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_offer_subscriptions_process_datas_offer_subscriptions_offer");

                    b.Navigation("OfferSubscription");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferTag", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("Tags")
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_offer_tags_offers_offer_id");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OnboardingServiceProviderDetail", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithOne("OnboardingServiceProviderDetail")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OnboardingServiceProviderDetail", "CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_onboarding_service_provider_details_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessType", "ProcessType")
                        .WithMany("Processes")
                        .HasForeignKey("ProcessTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_processes_process_types_process_type_id");

                    b.Navigation("ProcessType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStep", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", "Process")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("ProcessId")
                        .IsRequired()
                        .HasConstraintName("fk_process_steps_processes_process_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStepStatus", "ProcessStepStatus")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("ProcessStepStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_process_steps_process_step_statuses_process_step_status_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStepType", "ProcessStepType")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("ProcessStepTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_process_steps_process_step_types_process_step_type_id");

                    b.Navigation("Process");

                    b.Navigation("ProcessStepStatus");

                    b.Navigation("ProcessStepType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProviderCompanyDetail", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithOne("ProviderCompanyDetail")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProviderCompanyDetail", "CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_provider_company_details_companies_company_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_provider_company_details_identities_last_editor_id");

                    b.Navigation("Company");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ServiceDetail", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Service")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("fk_service_details_offers_service_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ServiceType", "ServiceType")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_service_details_service_types_service_type_id");

                    b.Navigation("Service");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.TechnicalUserProfile", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("TechnicalUserProfiles")
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("fk_technical_user_profiles_offers_offer_id");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.TechnicalUserProfileAssignedUserRole", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.TechnicalUserProfile", "TechnicalUserProfile")
                        .WithMany("TechnicalUserProfileAssignedUserRoles")
                        .HasForeignKey("TechnicalUserProfileId")
                        .IsRequired()
                        .HasConstraintName("fk_technical_user_profile_assigned_user_roles_technical_user_p");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRole", "UserRole")
                        .WithMany("TechnicalUserProfileAssignedUserRole")
                        .HasForeignKey("UserRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_technical_user_profile_assigned_user_roles_user_roles_user_");

                    b.Navigation("TechnicalUserProfile");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCaseDescription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("UseCases")
                        .HasForeignKey("LanguageShortName")
                        .IsRequired()
                        .HasConstraintName("fk_use_case_descriptions_languages_language_short_name");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCase", "UseCase")
                        .WithMany("UseCaseDescriptions")
                        .HasForeignKey("UseCaseId")
                        .IsRequired()
                        .HasConstraintName("fk_use_case_descriptions_use_cases_use_case_id");

                    b.Navigation("Language");

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRole", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("fk_user_roles_identities_last_editor_id");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", "Offer")
                        .WithMany("UserRoles")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_offers_offer_id");

                    b.Navigation("LastEditor");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleAssignedCollection", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleCollection", "UserRoleCollection")
                        .WithMany()
                        .HasForeignKey("UserRoleCollectionId")
                        .IsRequired()
                        .HasConstraintName("fk_user_role_assigned_collections_user_role_collections_user_r");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_user_role_assigned_collections_user_roles_user_role_id");

                    b.Navigation("UserRole");

                    b.Navigation("UserRoleCollection");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleCollectionDescription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageShortName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_collection_descriptions_languages_language_short_");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleCollection", "UserRoleCollection")
                        .WithMany("UserRoleCollectionDescriptions")
                        .HasForeignKey("UserRoleCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_collection_descriptions_user_role_collections_use");

                    b.Navigation("Language");

                    b.Navigation("UserRoleCollection");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleDescription", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("UserRoleDescriptions")
                        .HasForeignKey("LanguageShortName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_descriptions_languages_language_short_name");

                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRole", "UserRole")
                        .WithMany("UserRoleDescriptions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_descriptions_user_roles_user_role_id");

                    b.Navigation("Language");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.CompaniesLinkedServiceAccount", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", "CompanyServiceAccount")
                        .WithOne("CompaniesLinkedServiceAccount")
                        .HasForeignKey("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Views.CompaniesLinkedServiceAccount", "ServiceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_linked_service_accounts_company_service_accounts_co");

                    b.Navigation("CompanyServiceAccount");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateStatus", b =>
                {
                    b.Navigation("CompanyCertificates");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateType", b =>
                {
                    b.Navigation("CompanyCertificateTypeAssignedStatus");

                    b.Navigation("CompanyCertificateTypeDescriptions");

                    b.Navigation("CompanyCertificates");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.CompanyCertificateTypeStatus", b =>
                {
                    b.Navigation("CompanyCertificateTypeAssignedStatuses");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Address", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Agreement", b =>
                {
                    b.Navigation("AgreementAssignedCompanyRoles");

                    b.Navigation("AgreementAssignedOfferTypes");

                    b.Navigation("AgreementAssignedOffers");

                    b.Navigation("Consents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementCategory", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AgreementStatus", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.AppInstance", b =>
                {
                    b.Navigation("AppSubscriptionDetails");

                    b.Navigation("ServiceAccounts");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntryStatus", b =>
                {
                    b.Navigation("ApplicationChecklistEntries");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ApplicationChecklistEntryType", b =>
                {
                    b.Navigation("ApplicationChecklistEntries");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.BpdmIdentifier", b =>
                {
                    b.Navigation("CountryAssignedIdentifiers");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Company", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("CompanyApplications");

                    b.Navigation("CompanyAssignedRoles");

                    b.Navigation("CompanyAssignedUseCase");

                    b.Navigation("CompanyCertificates");

                    b.Navigation("CompanyIdentifiers");

                    b.Navigation("CompanyWalletData");

                    b.Navigation("Consents");

                    b.Navigation("HostedConnectors");

                    b.Navigation("Identities");

                    b.Navigation("NetworkRegistration");

                    b.Navigation("OfferSubscriptions");

                    b.Navigation("OnboardedNetworkRegistrations");

                    b.Navigation("OnboardingServiceProviderDetail");

                    b.Navigation("OwnedIdentityProviders");

                    b.Navigation("ProvidedApplications");

                    b.Navigation("ProvidedConnectors");

                    b.Navigation("ProvidedOffers");

                    b.Navigation("ProviderCompanyDetail");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplication", b =>
                {
                    b.Navigation("ApplicationChecklistEntries");

                    b.Navigation("CompanyInvitation");

                    b.Navigation("Invitations");

                    b.Navigation("NetworkRegistration");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplicationStatus", b =>
                {
                    b.Navigation("CompanyApplications");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyApplicationType", b =>
                {
                    b.Navigation("CompanyApplications");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyRole", b =>
                {
                    b.Navigation("AgreementAssignedCompanyRoles");

                    b.Navigation("CompanyAssignedRoles");

                    b.Navigation("CompanyRoleAssignedRoleCollection");

                    b.Navigation("CompanyRoleDescriptions");

                    b.Navigation("CompanyRoleRegistrationData");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccount", b =>
                {
                    b.Navigation("AppInstances");

                    b.Navigation("CompaniesLinkedServiceAccount");

                    b.Navigation("Connector");

                    b.Navigation("DimCompanyServiceAccount");

                    b.Navigation("DimUserCreationData");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccountKind", b =>
                {
                    b.Navigation("CompanyServiceAccounts");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyServiceAccountType", b =>
                {
                    b.Navigation("CompanyServiceAccounts");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyStatus", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.CompanyUser", b =>
                {
                    b.Navigation("CompanyUserAssignedBusinessPartners");

                    b.Navigation("CompanyUserAssignedIdentityProviders");

                    b.Navigation("CompanyUserAssignedProcess");

                    b.Navigation("Consents");

                    b.Navigation("Documents");

                    b.Navigation("Invitations");

                    b.Navigation("Notifications");

                    b.Navigation("RequestedSubscriptions");

                    b.Navigation("SalesManagerOfOffers");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Connector", b =>
                {
                    b.Navigation("ConnectorAssignedOfferSubscriptions");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorStatus", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConnectorType", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Consent", b =>
                {
                    b.Navigation("ConsentAssignedOfferSubscriptions");

                    b.Navigation("ConsentAssignedOffers");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ConsentStatus", b =>
                {
                    b.Navigation("Consents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Connectors");

                    b.Navigation("CountryAssignedIdentifiers");

                    b.Navigation("CountryLongNames");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Document", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Companies");

                    b.Navigation("CompanyCertificates");

                    b.Navigation("Connector");

                    b.Navigation("Consents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DocumentStatus", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IamClient", b =>
                {
                    b.Navigation("AppInstances");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Identity", b =>
                {
                    b.Navigation("CompanyServiceAccount");

                    b.Navigation("CompanyUser");

                    b.Navigation("CreatedNotifications");

                    b.Navigation("IdentityAssignedRoles");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProvider", b =>
                {
                    b.Navigation("CompanyIdentityProviders");

                    b.Navigation("CompanyUserAssignedIdentityProviders");

                    b.Navigation("IamIdentityProvider");

                    b.Navigation("IdentityProviderAssignedProcess");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderCategory", b =>
                {
                    b.Navigation("IdentityProviders");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityProviderType", b =>
                {
                    b.Navigation("IdentityProviders");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityType", b =>
                {
                    b.Navigation("Identities");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.IdentityUserStatus", b =>
                {
                    b.Navigation("Identities");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.InvitationStatus", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Language", b =>
                {
                    b.Navigation("AppDescriptions");

                    b.Navigation("CompanyCertificateTypeDescriptions");

                    b.Navigation("CompanyRoleDescriptions");

                    b.Navigation("CountryLongNames");

                    b.Navigation("LanguageLongNameLanguages");

                    b.Navigation("LanguageLongNames");

                    b.Navigation("UseCases");

                    b.Navigation("UserRoleDescriptions");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.LicenseType", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MailingStatus", b =>
                {
                    b.Navigation("MailingInformations");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.MediaType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationTopic", b =>
                {
                    b.Navigation("NotificationTypeAssignedTopics");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.NotificationType", b =>
                {
                    b.Navigation("NotificationTypeAssignedTopic");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Offer", b =>
                {
                    b.Navigation("AgreementAssignedOffers");

                    b.Navigation("AppInstanceSetup");

                    b.Navigation("AppInstances");

                    b.Navigation("ConsentAssignedOffers");

                    b.Navigation("OfferAssignedPrivacyPolicies");

                    b.Navigation("OfferDescriptions");

                    b.Navigation("OfferSubscriptions");

                    b.Navigation("ServiceDetails");

                    b.Navigation("Tags");

                    b.Navigation("TechnicalUserProfiles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferStatus", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscription", b =>
                {
                    b.Navigation("AppSubscriptionDetail");

                    b.Navigation("CompanyServiceAccounts");

                    b.Navigation("ConnectorAssignedOfferSubscriptions");

                    b.Navigation("ConsentAssignedOfferSubscriptions");

                    b.Navigation("OfferSubscriptionProcessData");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferSubscriptionStatus", b =>
                {
                    b.Navigation("OfferSubscriptions");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.OfferType", b =>
                {
                    b.Navigation("AgreementAssignedOfferTypes");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.PrivacyPolicy", b =>
                {
                    b.Navigation("OfferAssignedPrivacyPolicies");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.Process", b =>
                {
                    b.Navigation("CompanyApplication");

                    b.Navigation("CompanyInvitation");

                    b.Navigation("CompanyUserAssignedProcess");

                    b.Navigation("DimUserCreationData");

                    b.Navigation("IdentityProviderAssignedProcess");

                    b.Navigation("MailingInformation");

                    b.Navigation("NetworkRegistration");

                    b.Navigation("OfferSubscription");

                    b.Navigation("ProcessSteps");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStepStatus", b =>
                {
                    b.Navigation("ProcessSteps");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessStepType", b =>
                {
                    b.Navigation("ProcessSteps");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ProcessType", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.ServiceType", b =>
                {
                    b.Navigation("ServiceDetails");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.TechnicalUserProfile", b =>
                {
                    b.Navigation("TechnicalUserProfileAssignedUserRoles");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UniqueIdentifier", b =>
                {
                    b.Navigation("CompanyIdentifiers");

                    b.Navigation("CountryAssignedIdentifiers");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UseCase", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("CompanyAssignedUseCase");

                    b.Navigation("UseCaseDescriptions");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRole", b =>
                {
                    b.Navigation("IdentityAssignedRoles");

                    b.Navigation("TechnicalUserProfileAssignedUserRole");

                    b.Navigation("UserRoleDescriptions");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.Portal.Backend.PortalBackend.PortalEntities.Entities.UserRoleCollection", b =>
                {
                    b.Navigation("CompanyRoleAssignedRoleCollection");

                    b.Navigation("UserRoleCollectionDescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
