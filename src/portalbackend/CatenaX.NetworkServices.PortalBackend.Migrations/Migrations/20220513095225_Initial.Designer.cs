// <auto-generated />
using System;
using CatenaX.NetworkServices.PortalBackend.PortalEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CatenaX.NetworkServices.PortalBackend.Migrations.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20220513095225_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("CountryAlpha2Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("country_alpha2code")
                        .IsFixedLength();

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Region")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("region");

                    b.Property<string>("Streetadditional")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("streetadditional");

                    b.Property<string>("Streetname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("streetname");

                    b.Property<string>("Streetnumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("streetnumber");

                    b.Property<decimal>("Zipcode")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("CountryAlpha2Code")
                        .HasDatabaseName("ix_addresses_country_alpha2code");

                    b.ToTable("addresses", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AgreementCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("agreement_category_id");

                    b.Property<string>("AgreementType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("agreement_type");

                    b.Property<Guid?>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<Guid>("IssuerCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("issuer_company_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.HasKey("Id")
                        .HasName("pk_agreements");

                    b.HasIndex("AgreementCategoryId")
                        .HasDatabaseName("ix_agreements_agreement_category_id");

                    b.HasIndex("AppId")
                        .HasDatabaseName("ix_agreements_app_id");

                    b.HasIndex("IssuerCompanyId")
                        .HasDatabaseName("ix_agreements_issuer_company_id");

                    b.HasIndex("UseCaseId")
                        .HasDatabaseName("ix_agreements_use_case_id");

                    b.ToTable("agreements", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementAssignedCompanyRole", b =>
                {
                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.HasKey("AgreementId", "CompanyRoleId")
                        .HasName("pk_agreement_ass_comp_roles");

                    b.HasIndex("CompanyRoleId")
                        .HasDatabaseName("ix_agreement_assigned_company_roles_company_role_id");

                    b.ToTable("agreement_assigned_company_roles", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementAssignedDocumentTemplate", b =>
                {
                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<Guid>("DocumentTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_template_id");

                    b.HasKey("AgreementId", "DocumentTemplateId")
                        .HasName("pk_agreement_ass_doc_templa");

                    b.HasIndex(new[] { "DocumentTemplateId" }, "uk_9ib7xuc1vke96s9rvlyhxbtu")
                        .IsUnique()
                        .HasDatabaseName("ix_agreement_assigned_document_templates_document_template_id");

                    b.ToTable("agreement_assigned_document_templates", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementCategory", b =>
                {
                    b.Property<int>("AgreementCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("agreement_category_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("AgreementCategoryId")
                        .HasName("pk_agreement_categories");

                    b.ToTable("agreement_categories", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AppStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("app_status_id");

                    b.Property<string>("AppUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("app_url");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_number");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateReleased")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_released");

                    b.Property<string>("MarketingUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("marketing_url");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("provider");

                    b.Property<Guid?>("ProviderCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_company_id");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("thumbnail_url");

                    b.HasKey("Id")
                        .HasName("pk_apps");

                    b.HasIndex("AppStatusId")
                        .HasDatabaseName("ix_apps_app_status_id");

                    b.HasIndex("ProviderCompanyId")
                        .HasDatabaseName("ix_apps_provider_company_id");

                    b.ToTable("apps", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppAssignedClient", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<Guid>("IamClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("iam_client_id");

                    b.HasKey("AppId", "IamClientId")
                        .HasName("pk_app_assigned_clients");

                    b.HasIndex("IamClientId")
                        .HasDatabaseName("ix_app_assigned_clients_iam_client_id");

                    b.ToTable("app_assigned_clients", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppAssignedLicense", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<Guid>("AppLicenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_license_id");

                    b.HasKey("AppId", "AppLicenseId")
                        .HasName("pk_app_assigned_licenses");

                    b.HasIndex("AppLicenseId")
                        .HasDatabaseName("ix_app_assigned_licenses_app_license_id");

                    b.ToTable("app_assigned_licenses", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppAssignedUseCase", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<Guid>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.HasKey("AppId", "UseCaseId")
                        .HasName("pk_app_assigned_use_cases");

                    b.HasIndex("UseCaseId")
                        .HasDatabaseName("ix_app_assigned_use_cases_use_case_id");

                    b.ToTable("app_assigned_use_cases", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppDescription", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name")
                        .IsFixedLength();

                    b.Property<string>("DescriptionLong")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description_long");

                    b.Property<string>("DescriptionShort")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description_short");

                    b.HasKey("AppId", "LanguageShortName")
                        .HasName("app_descriptions_pkey");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_app_descriptions_language_short_name");

                    b.ToTable("app_descriptions", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppDetailImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.HasKey("Id")
                        .HasName("pk_app_detail_images");

                    b.HasIndex("AppId")
                        .HasDatabaseName("ix_app_detail_images_app_id");

                    b.ToTable("app_detail_images", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppLanguage", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.HasKey("AppId", "LanguageShortName")
                        .HasName("pk_app_language");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_app_languages_language_short_name");

                    b.ToTable("app_languages", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Licensetext")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("licensetext");

                    b.HasKey("Id")
                        .HasName("pk_app_licenses");

                    b.ToTable("app_licenses", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppStatus", b =>
                {
                    b.Property<int>("AppStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("app_status_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.HasKey("AppStatusId")
                        .HasName("pk_app_status");

                    b.ToTable("app_status", "portal");

                    b.HasData(
                        new
                        {
                            AppStatusId = 1,
                            Label = "CREATED"
                        },
                        new
                        {
                            AppStatusId = 2,
                            Label = "IN_REVIEW"
                        },
                        new
                        {
                            AppStatusId = 3,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            AppStatusId = 4,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppTag", b =>
                {
                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag_name");

                    b.HasKey("AppId", "Name")
                        .HasName("pk_app_tags");

                    b.ToTable("app_tags", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("Bpn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("bpn");

                    b.Property<int>("CompanyStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Parent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("parent");

                    b.Property<string>("Shortname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shortname");

                    b.Property<string>("TaxId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tax_id");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_companies_address_id");

                    b.HasIndex("CompanyStatusId")
                        .HasDatabaseName("ix_companies_company_status_id");

                    b.ToTable("companies", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_status_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.HasKey("Id")
                        .HasName("pk_company_applications");

                    b.HasIndex("ApplicationStatusId")
                        .HasDatabaseName("ix_company_applications_application_status_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_applications_company_id");

                    b.ToTable("company_applications", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyApplicationStatus", b =>
                {
                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("application_status_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("ApplicationStatusId")
                        .HasName("company_application_status_pkey");

                    b.ToTable("company_application_status", "portal");

                    b.HasData(
                        new
                        {
                            ApplicationStatusId = 1,
                            Label = "CREATED"
                        },
                        new
                        {
                            ApplicationStatusId = 2,
                            Label = "ADD_COMPANY_DATA"
                        },
                        new
                        {
                            ApplicationStatusId = 3,
                            Label = "INVITE_USER"
                        },
                        new
                        {
                            ApplicationStatusId = 4,
                            Label = "SELECT_COMPANY_ROLE"
                        },
                        new
                        {
                            ApplicationStatusId = 5,
                            Label = "UPLOAD_DOCUMENTS"
                        },
                        new
                        {
                            ApplicationStatusId = 6,
                            Label = "VERIFY"
                        },
                        new
                        {
                            ApplicationStatusId = 7,
                            Label = "SUBMITTED"
                        },
                        new
                        {
                            ApplicationStatusId = 8,
                            Label = "CONFIRMED"
                        },
                        new
                        {
                            ApplicationStatusId = 9,
                            Label = "DECLINED"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyAssignedApp", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.HasKey("CompanyId", "AppId")
                        .HasName("pk_company_assigned_apps");

                    b.HasIndex("AppId")
                        .HasDatabaseName("ix_company_assigned_apps_app_id");

                    b.ToTable("company_assigned_apps", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyAssignedRole", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.HasKey("CompanyId", "CompanyRoleId")
                        .HasName("pk_company_assigned_roles");

                    b.HasIndex("CompanyRoleId")
                        .HasDatabaseName("ix_company_assigned_roles_company_role_id");

                    b.ToTable("company_assigned_roles", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyAssignedUseCase", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.HasKey("CompanyId", "UseCaseId")
                        .HasName("pk_company_assigned_use_cas");

                    b.HasIndex("UseCaseId")
                        .HasDatabaseName("ix_company_assigned_use_cases_use_case_id");

                    b.ToTable("company_assigned_use_cases", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyIdentityProvider", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("IdentityProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_provider_id");

                    b.HasKey("CompanyId", "IdentityProviderId")
                        .HasName("pk_company_identity_provider");

                    b.HasIndex("IdentityProviderId")
                        .HasDatabaseName("ix_company_identity_provider_identity_provider_id");

                    b.ToTable("company_identity_provider", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyRole", b =>
                {
                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("CompanyRoleId")
                        .HasName("pk_company_roles");

                    b.ToTable("company_roles", "portal");

                    b.HasData(
                        new
                        {
                            CompanyRoleId = 1,
                            Label = "ACTIVE_PARTICIPANT"
                        },
                        new
                        {
                            CompanyRoleId = 2,
                            Label = "APP_PROVIDER"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyRoleDescription", b =>
                {
                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("company_role_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CompanyRoleId", "LanguageShortName")
                        .HasName("pk_company_role_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_company_role_descriptions_language_short_name");

                    b.ToTable("company_role_descriptions", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyStatus", b =>
                {
                    b.Property<int>("CompanyStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_status_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("CompanyStatusId")
                        .HasName("pk_company_status");

                    b.ToTable("company_status", "portal");

                    b.HasData(
                        new
                        {
                            CompanyStatusId = 1,
                            Label = "PENDING"
                        },
                        new
                        {
                            CompanyStatusId = 2,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            CompanyStatusId = 3,
                            Label = "REJECTED"
                        },
                        new
                        {
                            CompanyStatusId = 4,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("CompanyUserStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_user_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<byte[]>("Lastlogin")
                        .HasColumnType("bytea")
                        .HasColumnName("lastlogin");

                    b.Property<string>("Lastname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.HasKey("Id")
                        .HasName("pk_company_users");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_users_company_id");

                    b.HasIndex("CompanyUserStatusId")
                        .HasDatabaseName("ix_company_users_company_user_status_id");

                    b.ToTable("company_users", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUserAssignedAppFavourite", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.HasKey("CompanyUserId", "AppId")
                        .HasName("pk_comp_user_ass_app_favour");

                    b.HasIndex("AppId")
                        .HasDatabaseName("ix_company_user_assigned_app_favourites_app_id");

                    b.ToTable("company_user_assigned_app_favourites", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUserAssignedRole", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.HasKey("CompanyUserId", "UserRoleId")
                        .HasName("pk_comp_user_assigned_roles");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_company_user_assigned_roles_user_role_id");

                    b.ToTable("company_user_assigned_roles", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUserStatus", b =>
                {
                    b.Property<int>("CompanyUserStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_user_status_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("CompanyUserStatusId")
                        .HasName("pk_company_user_status");

                    b.ToTable("company_user_status", "portal");

                    b.HasData(
                        new
                        {
                            CompanyUserStatusId = 1,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            CompanyUserStatusId = 2,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<int>("ConsentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("consent_status_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<string>("Target")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("target");

                    b.HasKey("Id")
                        .HasName("pk_consents");

                    b.HasIndex("AgreementId")
                        .HasDatabaseName("ix_consents_agreement_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_consents_company_id");

                    b.HasIndex("CompanyUserId")
                        .HasDatabaseName("ix_consents_company_user_id");

                    b.HasIndex("ConsentStatusId")
                        .HasDatabaseName("ix_consents_consent_status_id");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_consents_document_id");

                    b.ToTable("consents", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.ConsentStatus", b =>
                {
                    b.Property<int>("ConsentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("consent_status_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("ConsentStatusId")
                        .HasName("pk_consent_status");

                    b.ToTable("consent_status", "portal");

                    b.HasData(
                        new
                        {
                            ConsentStatusId = 1,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            ConsentStatusId = 2,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Country", b =>
                {
                    b.Property<string>("Alpha2Code")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("alpha2code")
                        .IsFixedLength();

                    b.Property<string>("Alpha3Code")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("alpha3code")
                        .IsFixedLength();

                    b.Property<string>("CountryNameDe")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country_name_de");

                    b.Property<string>("CountryNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country_name_en");

                    b.HasKey("Alpha2Code")
                        .HasName("pk_countries");

                    b.ToTable("countries", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<uint>("DocumentOid")
                        .HasColumnType("oid")
                        .HasColumnName("document");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<string>("Documenthash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("documenthash");

                    b.Property<string>("Documentname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("documentname");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("CompanyUserId")
                        .HasDatabaseName("ix_documents_company_user_id");

                    b.HasIndex("DocumentTypeId")
                        .HasDatabaseName("ix_documents_document_type_id");

                    b.ToTable("documents", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Documenttemplatename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("documenttemplatename");

                    b.Property<string>("Documenttemplateversion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("documenttemplateversion");

                    b.HasKey("Id")
                        .HasName("pk_document_templates");

                    b.ToTable("document_templates", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.HasKey("DocumentTypeId")
                        .HasName("pk_document_types");

                    b.ToTable("document_types", "portal");

                    b.HasData(
                        new
                        {
                            DocumentTypeId = 1,
                            Label = "CXFrameContract"
                        },
                        new
                        {
                            DocumentTypeId = 2,
                            Label = "CommercialRegisterExtract"
                        },
                        new
                        {
                            DocumentTypeId = 3,
                            Label = "AppContract"
                        },
                        new
                        {
                            DocumentTypeId = 4,
                            Label = "DataContract"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_client_id");

                    b.HasKey("Id")
                        .HasName("pk_iam_clients");

                    b.HasIndex(new[] { "ClientClientId" }, "uk_iam_client_client_client_id")
                        .IsUnique()
                        .HasDatabaseName("ix_iam_clients_client_client_id");

                    b.ToTable("iam_clients", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamIdentityProvider", b =>
                {
                    b.Property<string>("IamIdpAlias")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("iam_idp_alias");

                    b.Property<Guid>("IdentityProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_provider_id");

                    b.HasKey("IamIdpAlias")
                        .HasName("pk_iam_identity_providers");

                    b.HasIndex(new[] { "IdentityProviderId" }, "uk_aiehoat94wlhasdfiwlkefisi")
                        .IsUnique()
                        .HasDatabaseName("ix_iam_identity_providers_identity_provider_id");

                    b.ToTable("iam_identity_providers", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamUser", b =>
                {
                    b.Property<string>("UserEntityId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_entity_id");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.HasKey("UserEntityId")
                        .HasName("pk_iam_users");

                    b.HasIndex(new[] { "CompanyUserId" }, "uk_wiodwiowhdfo84f0sd9afsd2")
                        .IsUnique()
                        .HasDatabaseName("ix_iam_users_company_user_id");

                    b.ToTable("iam_users", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int>("IdentityProviderCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_provider_category_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_providers");

                    b.HasIndex("IdentityProviderCategoryId")
                        .HasDatabaseName("ix_identity_providers_identity_provider_category_id");

                    b.ToTable("identity_providers", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProviderCategory", b =>
                {
                    b.Property<int>("IdentityProviderCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_provider_category_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("IdentityProviderCategoryId")
                        .HasName("pk_identity_provider_categories");

                    b.ToTable("identity_provider_categories", "portal");

                    b.HasData(
                        new
                        {
                            IdentityProviderCategoryId = 1,
                            Label = "KEYCLOAK_SHARED"
                        },
                        new
                        {
                            IdentityProviderCategoryId = 2,
                            Label = "KEYCLOAK_OIDC"
                        },
                        new
                        {
                            IdentityProviderCategoryId = 3,
                            Label = "KEYCLOAK_SAML"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_application_id");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int>("InvitationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("invitation_status_id");

                    b.HasKey("Id")
                        .HasName("pk_invitations");

                    b.HasIndex("CompanyApplicationId")
                        .HasDatabaseName("ix_invitations_company_application_id");

                    b.HasIndex("CompanyUserId")
                        .HasDatabaseName("ix_invitations_company_user_id");

                    b.HasIndex("InvitationStatusId")
                        .HasDatabaseName("ix_invitations_invitation_status_id");

                    b.ToTable("invitations", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.InvitationStatus", b =>
                {
                    b.Property<int>("InvitationStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("invitation_status_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("InvitationStatusId")
                        .HasName("pk_invitation_status");

                    b.ToTable("invitation_status", "portal");

                    b.HasData(
                        new
                        {
                            InvitationStatusId = 1,
                            Label = "CREATED"
                        },
                        new
                        {
                            InvitationStatusId = 2,
                            Label = "PENDING"
                        },
                        new
                        {
                            InvitationStatusId = 3,
                            Label = "ACCEPTED"
                        },
                        new
                        {
                            InvitationStatusId = 4,
                            Label = "DECLINED"
                        });
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Language", b =>
                {
                    b.Property<string>("ShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("short_name")
                        .IsFixedLength();

                    b.Property<string>("LongNameDe")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("long_name_de");

                    b.Property<string>("LongNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("long_name_en");

                    b.HasKey("ShortName")
                        .HasName("pk_languages");

                    b.ToTable("languages", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UseCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Shortname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shortname");

                    b.HasKey("Id")
                        .HasName("pk_use_cases");

                    b.ToTable("use_cases", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("IamClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("iam_client_id");

                    b.Property<string>("UserRoleText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_role");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("IamClientId")
                        .HasDatabaseName("ix_user_roles_iam_client_id");

                    b.ToTable("user_roles", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UserRoleDescription", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.Property<string>("LanguageShortName")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("language_short_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("UserRoleId", "LanguageShortName")
                        .HasName("pk_company_role_descriptions");

                    b.HasIndex("LanguageShortName")
                        .HasDatabaseName("ix_user_role_descriptions_language_short_name");

                    b.ToTable("user_role_descriptions", "portal");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Address", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryAlpha2Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_6jg6itw07d2qww62deuyk0kh");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Agreement", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementCategory", "AgreementCategory")
                        .WithMany("Agreements")
                        .HasForeignKey("AgreementCategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_owqie84qkle78dasifljiwer");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany("Agreements")
                        .HasForeignKey("AppId")
                        .HasConstraintName("fk_ooy9ydkah696jxh4lq7pn0xe");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "IssuerCompany")
                        .WithMany("Agreements")
                        .HasForeignKey("IssuerCompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_n4nnf5bn8i3i9ijrf7kchfvc");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UseCase", "UseCase")
                        .WithMany("Agreements")
                        .HasForeignKey("UseCaseId")
                        .HasConstraintName("fk_whby66dika71srejhja6g75a");

                    b.Navigation("AgreementCategory");

                    b.Navigation("App");

                    b.Navigation("IssuerCompany");

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementAssignedCompanyRole", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Agreement", "Agreement")
                        .WithMany("AgreementAssignedCompanyRoles")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("fk_ljol11mdo76f4kv7fwqn1qc6");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithMany("AgreementAssignedCompanyRoles")
                        .HasForeignKey("CompanyRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_qh1hby9qcrr3gmy1cvi7nd3h");

                    b.Navigation("Agreement");

                    b.Navigation("CompanyRole");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementAssignedDocumentTemplate", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Agreement", "Agreement")
                        .WithMany("AgreementAssignedDocumentTemplates")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("fk_fvcwoptsuer9p23m055osose");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.DocumentTemplate", "DocumentTemplate")
                        .WithOne("AgreementAssignedDocumentTemplate")
                        .HasForeignKey("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementAssignedDocumentTemplate", "DocumentTemplateId")
                        .IsRequired()
                        .HasConstraintName("fk_bvrvs5aktrcn4t6565pnj3ur");

                    b.Navigation("Agreement");

                    b.Navigation("DocumentTemplate");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppStatus", "AppStatus")
                        .WithMany("Apps")
                        .HasForeignKey("AppStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owihadhfweilwefhaf111aaa");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "ProviderCompany")
                        .WithMany("ProvidedApps")
                        .HasForeignKey("ProviderCompanyId")
                        .HasConstraintName("fk_68a9joedhyf43smfx2xc4rgm");

                    b.Navigation("AppStatus");

                    b.Navigation("ProviderCompany");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppAssignedClient", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_oayyvy590ngh5705yspep0up");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamClient", "IamClient")
                        .WithMany()
                        .HasForeignKey("IamClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_4m022ek8gffepnqlnuxwyxp8");

                    b.Navigation("App");

                    b.Navigation("IamClient");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppAssignedLicense", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_3of613iyw1jx8gcj5i46jc1h");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppLicense", "AppLicense")
                        .WithMany()
                        .HasForeignKey("AppLicenseId")
                        .IsRequired()
                        .HasConstraintName("fk_mes2xm3i1wotryfc88be4dkf");

                    b.Navigation("App");

                    b.Navigation("AppLicense");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppAssignedUseCase", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_qi320sp8lxy7drw6kt4vheka");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UseCase", "UseCase")
                        .WithMany()
                        .HasForeignKey("UseCaseId")
                        .IsRequired()
                        .HasConstraintName("fk_sjyfs49ma0kxaqfknjbaye0i");

                    b.Navigation("App");

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppDescription", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany("AppDescriptions")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_qamy6j7s3klebrf2s69v9k0i");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("AppDescriptions")
                        .HasForeignKey("LanguageShortName")
                        .IsRequired()
                        .HasConstraintName("fk_vrom2pjij9x6stgovhaqkfxf");

                    b.Navigation("App");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppDetailImage", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany("AppDetailImages")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_oayyvy590ngh5705yspep12a");

                    b.Navigation("App");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppLanguage", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_oayyvy590ngh5705yspep101");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageShortName")
                        .IsRequired()
                        .HasConstraintName("fk_oayyvy590ngh5705yspep102");

                    b.Navigation("App");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppTag", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany("Tags")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_qi320sp8lxy7drw6kt4vheka");

                    b.Navigation("App");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Address", "Address")
                        .WithMany("Companies")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_w70yf6urddd0ky7ev90okenf");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyStatus", "CompanyStatus")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owihadhfweilwefhaf682khj");

                    b.Navigation("Address");

                    b.Navigation("CompanyStatus");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyApplication", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyApplicationStatus", "ApplicationStatus")
                        .WithMany("CompanyApplications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_akuwiehfiadf8928fhefhuda");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyApplications")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_3prv5i3o84vwvh7v0hh3sav7");

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyAssignedApp", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_t365qpfvehuq40om25dyrnn5");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_k1dqlv81463yes0k8f2giyaf");

                    b.Navigation("App");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyAssignedRole", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyAssignedRoles")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_4db4hgj3yvqlkn9h6q8m4e0j");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithMany()
                        .HasForeignKey("CompanyRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_my2p7jlqrjf0tq1f8rhk0i0a");

                    b.Navigation("Company");

                    b.Navigation("CompanyRole");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyAssignedUseCase", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_u65fkdrxnbkp8n0s7mate01v");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UseCase", "UseCase")
                        .WithMany()
                        .HasForeignKey("UseCaseId")
                        .IsRequired()
                        .HasConstraintName("fk_m5eyaohrl0g9ju52byxsouqk");

                    b.Navigation("Company");

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyIdentityProvider", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_haad983jkald89wlkejidk234");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProvider", "IdentityProvider")
                        .WithMany()
                        .HasForeignKey("IdentityProviderId")
                        .IsRequired()
                        .HasConstraintName("fk_iwzehadf8whjd8asjdfuwefhs");

                    b.Navigation("Company");

                    b.Navigation("IdentityProvider");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyRoleDescription", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyRole", "CompanyRole")
                        .WithMany("CompanyRoleDescriptions")
                        .HasForeignKey("CompanyRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_role_descriptions_company_roles_company_role_id");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("CompanyRoleDescriptions")
                        .HasForeignKey("LanguageShortName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_role_descriptions_languages_language_short_name");

                    b.Navigation("CompanyRole");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_ku01366dbcqk8h32lh8k5sx1");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUserStatus", "CompanyUserStatus")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyUserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_users_company_user_status_id");

                    b.Navigation("Company");

                    b.Navigation("CompanyUserStatus");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUserAssignedAppFavourite", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("fk_eip97mygnbglivrtmkagesjh");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_wva553r3xiew3ngbdkvafk85");

                    b.Navigation("App");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUserAssignedRole", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_0c9rjjf9gm3l0n6reb4o0f1s");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_bw1yhel67uhrxfk7mevovq5p");

                    b.Navigation("CompanyUser");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Consent", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Agreement", "Agreement")
                        .WithMany("Consents")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("fk_39a5cbiv35v59ysgfon5oole");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", "Company")
                        .WithMany("Consents")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_asqxie2r7yr06cdrw9ifaex8");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("Consents")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_cnrtafckouq96m0fw2qtpwbs");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.ConsentStatus", "ConsentStatus")
                        .WithMany("Consents")
                        .HasForeignKey("ConsentStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_aiodhuwehw8wee20adskdfo2");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Document", "Document")
                        .WithMany("Consents")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("fk_36j22f34lgi2444n4tynxamh");

                    b.Navigation("Agreement");

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");

                    b.Navigation("ConsentStatus");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Document", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("Documents")
                        .HasForeignKey("CompanyUserId")
                        .HasConstraintName("fk_xcgobngn7vk56k8nfkuaysvn");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("fk_xcgobngn7vk56k8nfkualsvn");

                    b.Navigation("CompanyUser");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamIdentityProvider", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProvider", "IdentityProvider")
                        .WithOne("IamIdentityProvider")
                        .HasForeignKey("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamIdentityProvider", "IdentityProviderId")
                        .IsRequired()
                        .HasConstraintName("fk_9balkda89j2498dkj2lkjd9s3");

                    b.Navigation("IdentityProvider");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamUser", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithOne("IamUser")
                        .HasForeignKey("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamUser", "CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_iweorqwaeilskjeijekkalwo");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProvider", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProviderCategory", "IdentityProviderCategory")
                        .WithMany("IdentityProviders")
                        .HasForeignKey("IdentityProviderCategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_iwohgwi9342adf9asdnfuie28");

                    b.Navigation("IdentityProviderCategory");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Invitation", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyApplication", "CompanyApplication")
                        .WithMany("Invitations")
                        .HasForeignKey("CompanyApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dlrst4ju9d0wcgkh4w1nnoj3");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", "CompanyUser")
                        .WithMany("Invitations")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("fk_9tgenb7p09hr5c24haxjw259");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.InvitationStatus", "InvitationStatus")
                        .WithMany("Invitations")
                        .HasForeignKey("InvitationStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_woihaodhawoeir72alfidosd");

                    b.Navigation("CompanyApplication");

                    b.Navigation("CompanyUser");

                    b.Navigation("InvitationStatus");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UserRole", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamClient", "IamClient")
                        .WithMany("UserRoles")
                        .HasForeignKey("IamClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_iam_clients_iam_client_id");

                    b.Navigation("IamClient");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UserRoleDescription", b =>
                {
                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Language", "Language")
                        .WithMany("UserRoleDescriptions")
                        .HasForeignKey("LanguageShortName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_descriptions_languages_language_short_name");

                    b.HasOne("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UserRole", "UserRole")
                        .WithMany("UserRoleDescriptions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_descriptions_user_roles_user_role_id");

                    b.Navigation("Language");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Address", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Agreement", b =>
                {
                    b.Navigation("AgreementAssignedCompanyRoles");

                    b.Navigation("AgreementAssignedDocumentTemplates");

                    b.Navigation("Consents");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AgreementCategory", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.App", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("AppDescriptions");

                    b.Navigation("AppDetailImages");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.AppStatus", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Company", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("CompanyApplications");

                    b.Navigation("CompanyAssignedRoles");

                    b.Navigation("CompanyUsers");

                    b.Navigation("Consents");

                    b.Navigation("ProvidedApps");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyApplication", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyApplicationStatus", b =>
                {
                    b.Navigation("CompanyApplications");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyRole", b =>
                {
                    b.Navigation("AgreementAssignedCompanyRoles");

                    b.Navigation("CompanyRoleDescriptions");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyStatus", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUser", b =>
                {
                    b.Navigation("Consents");

                    b.Navigation("Documents");

                    b.Navigation("IamUser");

                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.CompanyUserStatus", b =>
                {
                    b.Navigation("CompanyUsers");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.ConsentStatus", b =>
                {
                    b.Navigation("Consents");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Document", b =>
                {
                    b.Navigation("Consents");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.DocumentTemplate", b =>
                {
                    b.Navigation("AgreementAssignedDocumentTemplate");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IamClient", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProvider", b =>
                {
                    b.Navigation("IamIdentityProvider");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.IdentityProviderCategory", b =>
                {
                    b.Navigation("IdentityProviders");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.InvitationStatus", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.Language", b =>
                {
                    b.Navigation("AppDescriptions");

                    b.Navigation("CompanyRoleDescriptions");

                    b.Navigation("UserRoleDescriptions");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UseCase", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("CatenaX.NetworkServices.PortalBackend.PortalEntities.Entities.UserRole", b =>
                {
                    b.Navigation("UserRoleDescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
